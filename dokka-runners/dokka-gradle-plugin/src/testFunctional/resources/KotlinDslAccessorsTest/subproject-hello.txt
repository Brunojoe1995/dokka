/**
 * Adds a dependency constraint to the 'dokka' configuration.
 *
 * @param constraintNotation the dependency constraint notation
 *
 * @return the added dependency constraint
 *
 * @see [DependencyConstraintHandler.add]
 */
fun DependencyConstraintHandler.`dokka`(constraintNotation: Any): DependencyConstraint =
    add("dokka", constraintNotation)

/**
 * Adds a dependency constraint to the 'dokka' configuration.
 *
 * @param constraintNotation the dependency constraint notation
 * @param block the block to use to configure the dependency constraint
 *
 * @return the added dependency constraint
 *
 * @see [DependencyConstraintHandler.add]
 */
fun DependencyConstraintHandler.`dokka`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
    add("dokka", constraintNotation, block)

/**
 * Adds a dependency constraint to the 'dokkaGfmPartialPlugin' configuration.
 *
 * @param constraintNotation the dependency constraint notation
 *
 * @return the added dependency constraint
 *
 * @see [DependencyConstraintHandler.add]
 */
@Deprecated(message = "The dokkaGfmPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmPlugin' configuration instead.")
fun DependencyConstraintHandler.`dokkaGfmPartialPlugin`(constraintNotation: Any): DependencyConstraint =
    add("dokkaGfmPartialPlugin", constraintNotation)

/**
 * Adds a dependency constraint to the 'dokkaGfmPartialPlugin' configuration.
 *
 * @param constraintNotation the dependency constraint notation
 * @param block the block to use to configure the dependency constraint
 *
 * @return the added dependency constraint
 *
 * @see [DependencyConstraintHandler.add]
 */
@Deprecated(message = "The dokkaGfmPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmPlugin' configuration instead.")
fun DependencyConstraintHandler.`dokkaGfmPartialPlugin`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
    add("dokkaGfmPartialPlugin", constraintNotation, block)

/**
 * Adds a dependency constraint to the 'dokkaGfmPartialRuntime' configuration.
 *
 * @param constraintNotation the dependency constraint notation
 *
 * @return the added dependency constraint
 *
 * @see [DependencyConstraintHandler.add]
 */
@Deprecated(message = "The dokkaGfmPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmGeneratorClasspath' configuration instead.")
fun DependencyConstraintHandler.`dokkaGfmPartialRuntime`(constraintNotation: Any): DependencyConstraint =
    add("dokkaGfmPartialRuntime", constraintNotation)

/**
 * Adds a dependency constraint to the 'dokkaGfmPartialRuntime' configuration.
 *
 * @param constraintNotation the dependency constraint notation
 * @param block the block to use to configure the dependency constraint
 *
 * @return the added dependency constraint
 *
 * @see [DependencyConstraintHandler.add]
 */
@Deprecated(message = "The dokkaGfmPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmGeneratorClasspath' configuration instead.")
fun DependencyConstraintHandler.`dokkaGfmPartialRuntime`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
    add("dokkaGfmPartialRuntime", constraintNotation, block)

/**
 * Adds a dependency constraint to the 'dokkaGfmPlugin' configuration.
 *
 * @param constraintNotation the dependency constraint notation
 *
 * @return the added dependency constraint
 *
 * @see [DependencyConstraintHandler.add]
 */
@Deprecated(message = "The dokkaGfmPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmPlugin' configuration instead.")
fun DependencyConstraintHandler.`dokkaGfmPlugin`(constraintNotation: Any): DependencyConstraint =
    add("dokkaGfmPlugin", constraintNotation)

/**
 * Adds a dependency constraint to the 'dokkaGfmPlugin' configuration.
 *
 * @param constraintNotation the dependency constraint notation
 * @param block the block to use to configure the dependency constraint
 *
 * @return the added dependency constraint
 *
 * @see [DependencyConstraintHandler.add]
 */
@Deprecated(message = "The dokkaGfmPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmPlugin' configuration instead.")
fun DependencyConstraintHandler.`dokkaGfmPlugin`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
    add("dokkaGfmPlugin", constraintNotation, block)

/**
 * Adds a dependency constraint to the 'dokkaGfmRuntime' configuration.
 *
 * @param constraintNotation the dependency constraint notation
 *
 * @return the added dependency constraint
 *
 * @see [DependencyConstraintHandler.add]
 */
@Deprecated(message = "The dokkaGfmRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmGeneratorClasspath' configuration instead.")
fun DependencyConstraintHandler.`dokkaGfmRuntime`(constraintNotation: Any): DependencyConstraint =
    add("dokkaGfmRuntime", constraintNotation)

/**
 * Adds a dependency constraint to the 'dokkaGfmRuntime' configuration.
 *
 * @param constraintNotation the dependency constraint notation
 * @param block the block to use to configure the dependency constraint
 *
 * @return the added dependency constraint
 *
 * @see [DependencyConstraintHandler.add]
 */
@Deprecated(message = "The dokkaGfmRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmGeneratorClasspath' configuration instead.")
fun DependencyConstraintHandler.`dokkaGfmRuntime`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
    add("dokkaGfmRuntime", constraintNotation, block)

/**
 * Adds a dependency constraint to the 'dokkaHtmlGeneratorRuntime' configuration.
 *
 * @param constraintNotation the dependency constraint notation
 *
 * @return the added dependency constraint
 *
 * @see [DependencyConstraintHandler.add]
 */
fun DependencyConstraintHandler.`dokkaHtmlGeneratorRuntime`(constraintNotation: Any): DependencyConstraint =
    add("dokkaHtmlGeneratorRuntime", constraintNotation)

/**
 * Adds a dependency constraint to the 'dokkaHtmlGeneratorRuntime' configuration.
 *
 * @param constraintNotation the dependency constraint notation
 * @param block the block to use to configure the dependency constraint
 *
 * @return the added dependency constraint
 *
 * @see [DependencyConstraintHandler.add]
 */
fun DependencyConstraintHandler.`dokkaHtmlGeneratorRuntime`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
    add("dokkaHtmlGeneratorRuntime", constraintNotation, block)

/**
 * Adds a dependency constraint to the 'dokkaHtmlGeneratorRuntimeResolver.internal' configuration.
 *
 * @param constraintNotation the dependency constraint notation
 *
 * @return the added dependency constraint
 *
 * @see [DependencyConstraintHandler.add]
 */
fun DependencyConstraintHandler.`dokkaHtmlGeneratorRuntimeResolver.internal`(constraintNotation: Any): DependencyConstraint =
    add("dokkaHtmlGeneratorRuntimeResolver.internal", constraintNotation)

/**
 * Adds a dependency constraint to the 'dokkaHtmlGeneratorRuntimeResolver.internal' configuration.
 *
 * @param constraintNotation the dependency constraint notation
 * @param block the block to use to configure the dependency constraint
 *
 * @return the added dependency constraint
 *
 * @see [DependencyConstraintHandler.add]
 */
fun DependencyConstraintHandler.`dokkaHtmlGeneratorRuntimeResolver.internal`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
    add("dokkaHtmlGeneratorRuntimeResolver.internal", constraintNotation, block)

/**
 * Adds a dependency constraint to the 'dokkaHtmlModuleOutputDirectoriesConsumable.internal' configuration.
 *
 * @param constraintNotation the dependency constraint notation
 *
 * @return the added dependency constraint
 *
 * @see [DependencyConstraintHandler.add]
 */
fun DependencyConstraintHandler.`dokkaHtmlModuleOutputDirectoriesConsumable.internal`(constraintNotation: Any): DependencyConstraint =
    add("dokkaHtmlModuleOutputDirectoriesConsumable.internal", constraintNotation)

/**
 * Adds a dependency constraint to the 'dokkaHtmlModuleOutputDirectoriesConsumable.internal' configuration.
 *
 * @param constraintNotation the dependency constraint notation
 * @param block the block to use to configure the dependency constraint
 *
 * @return the added dependency constraint
 *
 * @see [DependencyConstraintHandler.add]
 */
fun DependencyConstraintHandler.`dokkaHtmlModuleOutputDirectoriesConsumable.internal`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
    add("dokkaHtmlModuleOutputDirectoriesConsumable.internal", constraintNotation, block)

/**
 * Adds a dependency constraint to the 'dokkaHtmlModuleOutputDirectoriesResolver.internal' configuration.
 *
 * @param constraintNotation the dependency constraint notation
 *
 * @return the added dependency constraint
 *
 * @see [DependencyConstraintHandler.add]
 */
fun DependencyConstraintHandler.`dokkaHtmlModuleOutputDirectoriesResolver.internal`(constraintNotation: Any): DependencyConstraint =
    add("dokkaHtmlModuleOutputDirectoriesResolver.internal", constraintNotation)

/**
 * Adds a dependency constraint to the 'dokkaHtmlModuleOutputDirectoriesResolver.internal' configuration.
 *
 * @param constraintNotation the dependency constraint notation
 * @param block the block to use to configure the dependency constraint
 *
 * @return the added dependency constraint
 *
 * @see [DependencyConstraintHandler.add]
 */
fun DependencyConstraintHandler.`dokkaHtmlModuleOutputDirectoriesResolver.internal`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
    add("dokkaHtmlModuleOutputDirectoriesResolver.internal", constraintNotation, block)

/**
 * Adds a dependency constraint to the 'dokkaHtmlPartialRuntime' configuration.
 *
 * @param constraintNotation the dependency constraint notation
 *
 * @return the added dependency constraint
 *
 * @see [DependencyConstraintHandler.add]
 */
@Deprecated(message = "The dokkaHtmlPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlGeneratorClasspath' configuration instead.")
fun DependencyConstraintHandler.`dokkaHtmlPartialRuntime`(constraintNotation: Any): DependencyConstraint =
    add("dokkaHtmlPartialRuntime", constraintNotation)

/**
 * Adds a dependency constraint to the 'dokkaHtmlPartialRuntime' configuration.
 *
 * @param constraintNotation the dependency constraint notation
 * @param block the block to use to configure the dependency constraint
 *
 * @return the added dependency constraint
 *
 * @see [DependencyConstraintHandler.add]
 */
@Deprecated(message = "The dokkaHtmlPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlGeneratorClasspath' configuration instead.")
fun DependencyConstraintHandler.`dokkaHtmlPartialRuntime`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
    add("dokkaHtmlPartialRuntime", constraintNotation, block)

/**
 * Adds a dependency constraint to the 'dokkaHtmlPlugin' configuration.
 *
 * @param constraintNotation the dependency constraint notation
 *
 * @return the added dependency constraint
 *
 * @see [DependencyConstraintHandler.add]
 */
fun DependencyConstraintHandler.`dokkaHtmlPlugin`(constraintNotation: Any): DependencyConstraint =
    add("dokkaHtmlPlugin", constraintNotation)

/**
 * Adds a dependency constraint to the 'dokkaHtmlPlugin' configuration.
 *
 * @param constraintNotation the dependency constraint notation
 * @param block the block to use to configure the dependency constraint
 *
 * @return the added dependency constraint
 *
 * @see [DependencyConstraintHandler.add]
 */
fun DependencyConstraintHandler.`dokkaHtmlPlugin`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
    add("dokkaHtmlPlugin", constraintNotation, block)

/**
 * Adds a dependency constraint to the 'dokkaHtmlPluginIntransitiveResolver.internal' configuration.
 *
 * @param constraintNotation the dependency constraint notation
 *
 * @return the added dependency constraint
 *
 * @see [DependencyConstraintHandler.add]
 */
fun DependencyConstraintHandler.`dokkaHtmlPluginIntransitiveResolver.internal`(constraintNotation: Any): DependencyConstraint =
    add("dokkaHtmlPluginIntransitiveResolver.internal", constraintNotation)

/**
 * Adds a dependency constraint to the 'dokkaHtmlPluginIntransitiveResolver.internal' configuration.
 *
 * @param constraintNotation the dependency constraint notation
 * @param block the block to use to configure the dependency constraint
 *
 * @return the added dependency constraint
 *
 * @see [DependencyConstraintHandler.add]
 */
fun DependencyConstraintHandler.`dokkaHtmlPluginIntransitiveResolver.internal`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
    add("dokkaHtmlPluginIntransitiveResolver.internal", constraintNotation, block)

/**
 * Adds a dependency constraint to the 'dokkaHtmlPublicationPlugin' configuration.
 *
 * @param constraintNotation the dependency constraint notation
 *
 * @return the added dependency constraint
 *
 * @see [DependencyConstraintHandler.add]
 */
fun DependencyConstraintHandler.`dokkaHtmlPublicationPlugin`(constraintNotation: Any): DependencyConstraint =
    add("dokkaHtmlPublicationPlugin", constraintNotation)

/**
 * Adds a dependency constraint to the 'dokkaHtmlPublicationPlugin' configuration.
 *
 * @param constraintNotation the dependency constraint notation
 * @param block the block to use to configure the dependency constraint
 *
 * @return the added dependency constraint
 *
 * @see [DependencyConstraintHandler.add]
 */
fun DependencyConstraintHandler.`dokkaHtmlPublicationPlugin`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
    add("dokkaHtmlPublicationPlugin", constraintNotation, block)

/**
 * Adds a dependency constraint to the 'dokkaHtmlPublicationPluginApiOnly.internal' configuration.
 *
 * @param constraintNotation the dependency constraint notation
 *
 * @return the added dependency constraint
 *
 * @see [DependencyConstraintHandler.add]
 */
fun DependencyConstraintHandler.`dokkaHtmlPublicationPluginApiOnly.internal`(constraintNotation: Any): DependencyConstraint =
    add("dokkaHtmlPublicationPluginApiOnly.internal", constraintNotation)

/**
 * Adds a dependency constraint to the 'dokkaHtmlPublicationPluginApiOnly.internal' configuration.
 *
 * @param constraintNotation the dependency constraint notation
 * @param block the block to use to configure the dependency constraint
 *
 * @return the added dependency constraint
 *
 * @see [DependencyConstraintHandler.add]
 */
fun DependencyConstraintHandler.`dokkaHtmlPublicationPluginApiOnly.internal`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
    add("dokkaHtmlPublicationPluginApiOnly.internal", constraintNotation, block)

/**
 * Adds a dependency constraint to the 'dokkaHtmlPublicationPluginApiOnlyConsumable.internal' configuration.
 *
 * @param constraintNotation the dependency constraint notation
 *
 * @return the added dependency constraint
 *
 * @see [DependencyConstraintHandler.add]
 */
fun DependencyConstraintHandler.`dokkaHtmlPublicationPluginApiOnlyConsumable.internal`(constraintNotation: Any): DependencyConstraint =
    add("dokkaHtmlPublicationPluginApiOnlyConsumable.internal", constraintNotation)

/**
 * Adds a dependency constraint to the 'dokkaHtmlPublicationPluginApiOnlyConsumable.internal' configuration.
 *
 * @param constraintNotation the dependency constraint notation
 * @param block the block to use to configure the dependency constraint
 *
 * @return the added dependency constraint
 *
 * @see [DependencyConstraintHandler.add]
 */
fun DependencyConstraintHandler.`dokkaHtmlPublicationPluginApiOnlyConsumable.internal`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
    add("dokkaHtmlPublicationPluginApiOnlyConsumable.internal", constraintNotation, block)

/**
 * Adds a dependency constraint to the 'dokkaHtmlPublicationPluginResolver.internal' configuration.
 *
 * @param constraintNotation the dependency constraint notation
 *
 * @return the added dependency constraint
 *
 * @see [DependencyConstraintHandler.add]
 */
fun DependencyConstraintHandler.`dokkaHtmlPublicationPluginResolver.internal`(constraintNotation: Any): DependencyConstraint =
    add("dokkaHtmlPublicationPluginResolver.internal", constraintNotation)

/**
 * Adds a dependency constraint to the 'dokkaHtmlPublicationPluginResolver.internal' configuration.
 *
 * @param constraintNotation the dependency constraint notation
 * @param block the block to use to configure the dependency constraint
 *
 * @return the added dependency constraint
 *
 * @see [DependencyConstraintHandler.add]
 */
fun DependencyConstraintHandler.`dokkaHtmlPublicationPluginResolver.internal`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
    add("dokkaHtmlPublicationPluginResolver.internal", constraintNotation, block)

/**
 * Adds a dependency constraint to the 'dokkaHtmlRuntime' configuration.
 *
 * @param constraintNotation the dependency constraint notation
 *
 * @return the added dependency constraint
 *
 * @see [DependencyConstraintHandler.add]
 */
@Deprecated(message = "The dokkaHtmlRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlGeneratorClasspath' configuration instead.")
fun DependencyConstraintHandler.`dokkaHtmlRuntime`(constraintNotation: Any): DependencyConstraint =
    add("dokkaHtmlRuntime", constraintNotation)

/**
 * Adds a dependency constraint to the 'dokkaHtmlRuntime' configuration.
 *
 * @param constraintNotation the dependency constraint notation
 * @param block the block to use to configure the dependency constraint
 *
 * @return the added dependency constraint
 *
 * @see [DependencyConstraintHandler.add]
 */
@Deprecated(message = "The dokkaHtmlRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlGeneratorClasspath' configuration instead.")
fun DependencyConstraintHandler.`dokkaHtmlRuntime`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
    add("dokkaHtmlRuntime", constraintNotation, block)

/**
 * Adds a dependency constraint to the 'dokkaJavadocPartialPlugin' configuration.
 *
 * @param constraintNotation the dependency constraint notation
 *
 * @return the added dependency constraint
 *
 * @see [DependencyConstraintHandler.add]
 */
@Deprecated(message = "The dokkaJavadocPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJavadocPlugin' configuration instead.")
fun DependencyConstraintHandler.`dokkaJavadocPartialPlugin`(constraintNotation: Any): DependencyConstraint =
    add("dokkaJavadocPartialPlugin", constraintNotation)

/**
 * Adds a dependency constraint to the 'dokkaJavadocPartialPlugin' configuration.
 *
 * @param constraintNotation the dependency constraint notation
 * @param block the block to use to configure the dependency constraint
 *
 * @return the added dependency constraint
 *
 * @see [DependencyConstraintHandler.add]
 */
@Deprecated(message = "The dokkaJavadocPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJavadocPlugin' configuration instead.")
fun DependencyConstraintHandler.`dokkaJavadocPartialPlugin`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
    add("dokkaJavadocPartialPlugin", constraintNotation, block)

/**
 * Adds a dependency constraint to the 'dokkaJavadocPartialRuntime' configuration.
 *
 * @param constraintNotation the dependency constraint notation
 *
 * @return the added dependency constraint
 *
 * @see [DependencyConstraintHandler.add]
 */
@Deprecated(message = "The dokkaJavadocPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJavadocGeneratorClasspath' configuration instead.")
fun DependencyConstraintHandler.`dokkaJavadocPartialRuntime`(constraintNotation: Any): DependencyConstraint =
    add("dokkaJavadocPartialRuntime", constraintNotation)

/**
 * Adds a dependency constraint to the 'dokkaJavadocPartialRuntime' configuration.
 *
 * @param constraintNotation the dependency constraint notation
 * @param block the block to use to configure the dependency constraint
 *
 * @return the added dependency constraint
 *
 * @see [DependencyConstraintHandler.add]
 */
@Deprecated(message = "The dokkaJavadocPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJavadocGeneratorClasspath' configuration instead.")
fun DependencyConstraintHandler.`dokkaJavadocPartialRuntime`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
    add("dokkaJavadocPartialRuntime", constraintNotation, block)

/**
 * Adds a dependency constraint to the 'dokkaJavadocPlugin' configuration.
 *
 * @param constraintNotation the dependency constraint notation
 *
 * @return the added dependency constraint
 *
 * @see [DependencyConstraintHandler.add]
 */
@Deprecated(message = "The dokkaJavadocPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJavadocPlugin' configuration instead.")
fun DependencyConstraintHandler.`dokkaJavadocPlugin`(constraintNotation: Any): DependencyConstraint =
    add("dokkaJavadocPlugin", constraintNotation)

/**
 * Adds a dependency constraint to the 'dokkaJavadocPlugin' configuration.
 *
 * @param constraintNotation the dependency constraint notation
 * @param block the block to use to configure the dependency constraint
 *
 * @return the added dependency constraint
 *
 * @see [DependencyConstraintHandler.add]
 */
@Deprecated(message = "The dokkaJavadocPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJavadocPlugin' configuration instead.")
fun DependencyConstraintHandler.`dokkaJavadocPlugin`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
    add("dokkaJavadocPlugin", constraintNotation, block)

/**
 * Adds a dependency constraint to the 'dokkaJavadocRuntime' configuration.
 *
 * @param constraintNotation the dependency constraint notation
 *
 * @return the added dependency constraint
 *
 * @see [DependencyConstraintHandler.add]
 */
@Deprecated(message = "The dokkaJavadocRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJavadocGeneratorClasspath' configuration instead.")
fun DependencyConstraintHandler.`dokkaJavadocRuntime`(constraintNotation: Any): DependencyConstraint =
    add("dokkaJavadocRuntime", constraintNotation)

/**
 * Adds a dependency constraint to the 'dokkaJavadocRuntime' configuration.
 *
 * @param constraintNotation the dependency constraint notation
 * @param block the block to use to configure the dependency constraint
 *
 * @return the added dependency constraint
 *
 * @see [DependencyConstraintHandler.add]
 */
@Deprecated(message = "The dokkaJavadocRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJavadocGeneratorClasspath' configuration instead.")
fun DependencyConstraintHandler.`dokkaJavadocRuntime`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
    add("dokkaJavadocRuntime", constraintNotation, block)

/**
 * Adds a dependency constraint to the 'dokkaJekyllPartialPlugin' configuration.
 *
 * @param constraintNotation the dependency constraint notation
 *
 * @return the added dependency constraint
 *
 * @see [DependencyConstraintHandler.add]
 */
@Deprecated(message = "The dokkaJekyllPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllPlugin' configuration instead.")
fun DependencyConstraintHandler.`dokkaJekyllPartialPlugin`(constraintNotation: Any): DependencyConstraint =
    add("dokkaJekyllPartialPlugin", constraintNotation)

/**
 * Adds a dependency constraint to the 'dokkaJekyllPartialPlugin' configuration.
 *
 * @param constraintNotation the dependency constraint notation
 * @param block the block to use to configure the dependency constraint
 *
 * @return the added dependency constraint
 *
 * @see [DependencyConstraintHandler.add]
 */
@Deprecated(message = "The dokkaJekyllPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllPlugin' configuration instead.")
fun DependencyConstraintHandler.`dokkaJekyllPartialPlugin`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
    add("dokkaJekyllPartialPlugin", constraintNotation, block)

/**
 * Adds a dependency constraint to the 'dokkaJekyllPartialRuntime' configuration.
 *
 * @param constraintNotation the dependency constraint notation
 *
 * @return the added dependency constraint
 *
 * @see [DependencyConstraintHandler.add]
 */
@Deprecated(message = "The dokkaJekyllPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllGeneratorClasspath' configuration instead.")
fun DependencyConstraintHandler.`dokkaJekyllPartialRuntime`(constraintNotation: Any): DependencyConstraint =
    add("dokkaJekyllPartialRuntime", constraintNotation)

/**
 * Adds a dependency constraint to the 'dokkaJekyllPartialRuntime' configuration.
 *
 * @param constraintNotation the dependency constraint notation
 * @param block the block to use to configure the dependency constraint
 *
 * @return the added dependency constraint
 *
 * @see [DependencyConstraintHandler.add]
 */
@Deprecated(message = "The dokkaJekyllPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllGeneratorClasspath' configuration instead.")
fun DependencyConstraintHandler.`dokkaJekyllPartialRuntime`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
    add("dokkaJekyllPartialRuntime", constraintNotation, block)

/**
 * Adds a dependency constraint to the 'dokkaJekyllPlugin' configuration.
 *
 * @param constraintNotation the dependency constraint notation
 *
 * @return the added dependency constraint
 *
 * @see [DependencyConstraintHandler.add]
 */
@Deprecated(message = "The dokkaJekyllPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllPlugin' configuration instead.")
fun DependencyConstraintHandler.`dokkaJekyllPlugin`(constraintNotation: Any): DependencyConstraint =
    add("dokkaJekyllPlugin", constraintNotation)

/**
 * Adds a dependency constraint to the 'dokkaJekyllPlugin' configuration.
 *
 * @param constraintNotation the dependency constraint notation
 * @param block the block to use to configure the dependency constraint
 *
 * @return the added dependency constraint
 *
 * @see [DependencyConstraintHandler.add]
 */
@Deprecated(message = "The dokkaJekyllPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllPlugin' configuration instead.")
fun DependencyConstraintHandler.`dokkaJekyllPlugin`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
    add("dokkaJekyllPlugin", constraintNotation, block)

/**
 * Adds a dependency constraint to the 'dokkaJekyllRuntime' configuration.
 *
 * @param constraintNotation the dependency constraint notation
 *
 * @return the added dependency constraint
 *
 * @see [DependencyConstraintHandler.add]
 */
@Deprecated(message = "The dokkaJekyllRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllGeneratorClasspath' configuration instead.")
fun DependencyConstraintHandler.`dokkaJekyllRuntime`(constraintNotation: Any): DependencyConstraint =
    add("dokkaJekyllRuntime", constraintNotation)

/**
 * Adds a dependency constraint to the 'dokkaJekyllRuntime' configuration.
 *
 * @param constraintNotation the dependency constraint notation
 * @param block the block to use to configure the dependency constraint
 *
 * @return the added dependency constraint
 *
 * @see [DependencyConstraintHandler.add]
 */
@Deprecated(message = "The dokkaJekyllRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllGeneratorClasspath' configuration instead.")
fun DependencyConstraintHandler.`dokkaJekyllRuntime`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
    add("dokkaJekyllRuntime", constraintNotation, block)

/**
 * Adds a dependency constraint to the 'dokkaPlugin' configuration.
 *
 * @param constraintNotation the dependency constraint notation
 *
 * @return the added dependency constraint
 *
 * @see [DependencyConstraintHandler.add]
 */
fun DependencyConstraintHandler.`dokkaPlugin`(constraintNotation: Any): DependencyConstraint =
    add("dokkaPlugin", constraintNotation)

/**
 * Adds a dependency constraint to the 'dokkaPlugin' configuration.
 *
 * @param constraintNotation the dependency constraint notation
 * @param block the block to use to configure the dependency constraint
 *
 * @return the added dependency constraint
 *
 * @see [DependencyConstraintHandler.add]
 */
fun DependencyConstraintHandler.`dokkaPlugin`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
    add("dokkaPlugin", constraintNotation, block)

/**
 * Adds a dependency constraint to the 'dokkaRuntime' configuration.
 *
 * @param constraintNotation the dependency constraint notation
 *
 * @return the added dependency constraint
 *
 * @see [DependencyConstraintHandler.add]
 */
@Deprecated(message = "The dokkaRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlGeneratorRuntime' configuration instead.")
fun DependencyConstraintHandler.`dokkaRuntime`(constraintNotation: Any): DependencyConstraint =
    add("dokkaRuntime", constraintNotation)

/**
 * Adds a dependency constraint to the 'dokkaRuntime' configuration.
 *
 * @param constraintNotation the dependency constraint notation
 * @param block the block to use to configure the dependency constraint
 *
 * @return the added dependency constraint
 *
 * @see [DependencyConstraintHandler.add]
 */
@Deprecated(message = "The dokkaRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlGeneratorRuntime' configuration instead.")
fun DependencyConstraintHandler.`dokkaRuntime`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
    add("dokkaRuntime", constraintNotation, block)

/**
 * Adds a dependency to the 'dokka' configuration.
 *
 * @param dependency dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun <T : ModuleDependency> DependencyHandler.`dokka`(
    dependency: T,
    dependencyConfiguration: T.() -> Unit
): T = add("dokka", dependency, dependencyConfiguration)

/**
 * Adds a dependency to the 'dokka' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokka`(
    dependencyNotation: Provider<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokka", dependencyNotation, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokka' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokka`(
    dependencyNotation: ProviderConvertible<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokka", dependencyNotation, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokka' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokka`(
    dependencyNotation: String,
    dependencyConfiguration: Action<ExternalModuleDependency>
): ExternalModuleDependency = addDependencyTo(
    this, "dokka", dependencyNotation, dependencyConfiguration
) as ExternalModuleDependency

/**
 * Adds a dependency to the 'dokka' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokka`(dependencyNotation: Any): Dependency? =
    add("dokka", dependencyNotation)

/**
 * Adds a dependency to the 'dokka' configuration.
 *
 * @param group the group of the module to be added as a dependency.
 * @param name the name of the module to be added as a dependency.
 * @param version the optional version of the module to be added as a dependency.
 * @param configuration the optional configuration of the module to be added as a dependency.
 * @param classifier the optional classifier of the module artifact to be added as a dependency.
 * @param ext the optional extension of the module artifact to be added as a dependency.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.create]
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokka`(
    group: String,
    name: String,
    version: String? = null,
    configuration: String? = null,
    classifier: String? = null,
    ext: String? = null,
    dependencyConfiguration: Action<ExternalModuleDependency>? = null
): ExternalModuleDependency = addExternalModuleDependencyTo(
    this, "dokka", group, name, version, configuration, classifier, ext, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaGfmPartialPlugin' configuration.
 *
 * @param dependency dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaGfmPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmPlugin' configuration instead.")
fun <T : ModuleDependency> DependencyHandler.`dokkaGfmPartialPlugin`(
    dependency: T,
    dependencyConfiguration: T.() -> Unit
): T = add("dokkaGfmPartialPlugin", dependency, dependencyConfiguration)

/**
 * Adds a dependency to the 'dokkaGfmPartialPlugin' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaGfmPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmPlugin' configuration instead.")
fun DependencyHandler.`dokkaGfmPartialPlugin`(
    dependencyNotation: Provider<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaGfmPartialPlugin", dependencyNotation, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaGfmPartialPlugin' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaGfmPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmPlugin' configuration instead.")
fun DependencyHandler.`dokkaGfmPartialPlugin`(
    dependencyNotation: ProviderConvertible<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaGfmPartialPlugin", dependencyNotation, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaGfmPartialPlugin' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaGfmPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmPlugin' configuration instead.")
fun DependencyHandler.`dokkaGfmPartialPlugin`(
    dependencyNotation: String,
    dependencyConfiguration: Action<ExternalModuleDependency>
): ExternalModuleDependency = addDependencyTo(
    this, "dokkaGfmPartialPlugin", dependencyNotation, dependencyConfiguration
) as ExternalModuleDependency

/**
 * Adds a dependency to the 'dokkaGfmPartialPlugin' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaGfmPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmPlugin' configuration instead.")
fun DependencyHandler.`dokkaGfmPartialPlugin`(dependencyNotation: Any): Dependency? =
    add("dokkaGfmPartialPlugin", dependencyNotation)

/**
 * Adds a dependency to the 'dokkaGfmPartialPlugin' configuration.
 *
 * @param group the group of the module to be added as a dependency.
 * @param name the name of the module to be added as a dependency.
 * @param version the optional version of the module to be added as a dependency.
 * @param configuration the optional configuration of the module to be added as a dependency.
 * @param classifier the optional classifier of the module artifact to be added as a dependency.
 * @param ext the optional extension of the module artifact to be added as a dependency.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.create]
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaGfmPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmPlugin' configuration instead.")
fun DependencyHandler.`dokkaGfmPartialPlugin`(
    group: String,
    name: String,
    version: String? = null,
    configuration: String? = null,
    classifier: String? = null,
    ext: String? = null,
    dependencyConfiguration: Action<ExternalModuleDependency>? = null
): ExternalModuleDependency = addExternalModuleDependencyTo(
    this, "dokkaGfmPartialPlugin", group, name, version, configuration, classifier, ext, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaGfmPartialRuntime' configuration.
 *
 * @param dependency dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaGfmPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmGeneratorClasspath' configuration instead.")
fun <T : ModuleDependency> DependencyHandler.`dokkaGfmPartialRuntime`(
    dependency: T,
    dependencyConfiguration: T.() -> Unit
): T = add("dokkaGfmPartialRuntime", dependency, dependencyConfiguration)

/**
 * Adds a dependency to the 'dokkaGfmPartialRuntime' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaGfmPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmGeneratorClasspath' configuration instead.")
fun DependencyHandler.`dokkaGfmPartialRuntime`(
    dependencyNotation: Provider<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaGfmPartialRuntime", dependencyNotation, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaGfmPartialRuntime' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaGfmPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmGeneratorClasspath' configuration instead.")
fun DependencyHandler.`dokkaGfmPartialRuntime`(
    dependencyNotation: ProviderConvertible<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaGfmPartialRuntime", dependencyNotation, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaGfmPartialRuntime' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaGfmPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmGeneratorClasspath' configuration instead.")
fun DependencyHandler.`dokkaGfmPartialRuntime`(
    dependencyNotation: String,
    dependencyConfiguration: Action<ExternalModuleDependency>
): ExternalModuleDependency = addDependencyTo(
    this, "dokkaGfmPartialRuntime", dependencyNotation, dependencyConfiguration
) as ExternalModuleDependency

/**
 * Adds a dependency to the 'dokkaGfmPartialRuntime' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaGfmPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmGeneratorClasspath' configuration instead.")
fun DependencyHandler.`dokkaGfmPartialRuntime`(dependencyNotation: Any): Dependency? =
    add("dokkaGfmPartialRuntime", dependencyNotation)

/**
 * Adds a dependency to the 'dokkaGfmPartialRuntime' configuration.
 *
 * @param group the group of the module to be added as a dependency.
 * @param name the name of the module to be added as a dependency.
 * @param version the optional version of the module to be added as a dependency.
 * @param configuration the optional configuration of the module to be added as a dependency.
 * @param classifier the optional classifier of the module artifact to be added as a dependency.
 * @param ext the optional extension of the module artifact to be added as a dependency.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.create]
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaGfmPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmGeneratorClasspath' configuration instead.")
fun DependencyHandler.`dokkaGfmPartialRuntime`(
    group: String,
    name: String,
    version: String? = null,
    configuration: String? = null,
    classifier: String? = null,
    ext: String? = null,
    dependencyConfiguration: Action<ExternalModuleDependency>? = null
): ExternalModuleDependency = addExternalModuleDependencyTo(
    this, "dokkaGfmPartialRuntime", group, name, version, configuration, classifier, ext, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaGfmPlugin' configuration.
 *
 * @param dependency dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaGfmPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmPlugin' configuration instead.")
fun <T : ModuleDependency> DependencyHandler.`dokkaGfmPlugin`(
    dependency: T,
    dependencyConfiguration: T.() -> Unit
): T = add("dokkaGfmPlugin", dependency, dependencyConfiguration)

/**
 * Adds a dependency to the 'dokkaGfmPlugin' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaGfmPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmPlugin' configuration instead.")
fun DependencyHandler.`dokkaGfmPlugin`(
    dependencyNotation: Provider<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaGfmPlugin", dependencyNotation, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaGfmPlugin' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaGfmPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmPlugin' configuration instead.")
fun DependencyHandler.`dokkaGfmPlugin`(
    dependencyNotation: ProviderConvertible<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaGfmPlugin", dependencyNotation, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaGfmPlugin' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaGfmPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmPlugin' configuration instead.")
fun DependencyHandler.`dokkaGfmPlugin`(
    dependencyNotation: String,
    dependencyConfiguration: Action<ExternalModuleDependency>
): ExternalModuleDependency = addDependencyTo(
    this, "dokkaGfmPlugin", dependencyNotation, dependencyConfiguration
) as ExternalModuleDependency

/**
 * Adds a dependency to the 'dokkaGfmPlugin' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaGfmPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmPlugin' configuration instead.")
fun DependencyHandler.`dokkaGfmPlugin`(dependencyNotation: Any): Dependency? =
    add("dokkaGfmPlugin", dependencyNotation)

/**
 * Adds a dependency to the 'dokkaGfmPlugin' configuration.
 *
 * @param group the group of the module to be added as a dependency.
 * @param name the name of the module to be added as a dependency.
 * @param version the optional version of the module to be added as a dependency.
 * @param configuration the optional configuration of the module to be added as a dependency.
 * @param classifier the optional classifier of the module artifact to be added as a dependency.
 * @param ext the optional extension of the module artifact to be added as a dependency.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.create]
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaGfmPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmPlugin' configuration instead.")
fun DependencyHandler.`dokkaGfmPlugin`(
    group: String,
    name: String,
    version: String? = null,
    configuration: String? = null,
    classifier: String? = null,
    ext: String? = null,
    dependencyConfiguration: Action<ExternalModuleDependency>? = null
): ExternalModuleDependency = addExternalModuleDependencyTo(
    this, "dokkaGfmPlugin", group, name, version, configuration, classifier, ext, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaGfmRuntime' configuration.
 *
 * @param dependency dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaGfmRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmGeneratorClasspath' configuration instead.")
fun <T : ModuleDependency> DependencyHandler.`dokkaGfmRuntime`(
    dependency: T,
    dependencyConfiguration: T.() -> Unit
): T = add("dokkaGfmRuntime", dependency, dependencyConfiguration)

/**
 * Adds a dependency to the 'dokkaGfmRuntime' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaGfmRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmGeneratorClasspath' configuration instead.")
fun DependencyHandler.`dokkaGfmRuntime`(
    dependencyNotation: Provider<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaGfmRuntime", dependencyNotation, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaGfmRuntime' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaGfmRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmGeneratorClasspath' configuration instead.")
fun DependencyHandler.`dokkaGfmRuntime`(
    dependencyNotation: ProviderConvertible<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaGfmRuntime", dependencyNotation, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaGfmRuntime' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaGfmRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmGeneratorClasspath' configuration instead.")
fun DependencyHandler.`dokkaGfmRuntime`(
    dependencyNotation: String,
    dependencyConfiguration: Action<ExternalModuleDependency>
): ExternalModuleDependency = addDependencyTo(
    this, "dokkaGfmRuntime", dependencyNotation, dependencyConfiguration
) as ExternalModuleDependency

/**
 * Adds a dependency to the 'dokkaGfmRuntime' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaGfmRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmGeneratorClasspath' configuration instead.")
fun DependencyHandler.`dokkaGfmRuntime`(dependencyNotation: Any): Dependency? =
    add("dokkaGfmRuntime", dependencyNotation)

/**
 * Adds a dependency to the 'dokkaGfmRuntime' configuration.
 *
 * @param group the group of the module to be added as a dependency.
 * @param name the name of the module to be added as a dependency.
 * @param version the optional version of the module to be added as a dependency.
 * @param configuration the optional configuration of the module to be added as a dependency.
 * @param classifier the optional classifier of the module artifact to be added as a dependency.
 * @param ext the optional extension of the module artifact to be added as a dependency.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.create]
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaGfmRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmGeneratorClasspath' configuration instead.")
fun DependencyHandler.`dokkaGfmRuntime`(
    group: String,
    name: String,
    version: String? = null,
    configuration: String? = null,
    classifier: String? = null,
    ext: String? = null,
    dependencyConfiguration: Action<ExternalModuleDependency>? = null
): ExternalModuleDependency = addExternalModuleDependencyTo(
    this, "dokkaGfmRuntime", group, name, version, configuration, classifier, ext, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaHtmlGeneratorRuntime' configuration.
 *
 * @param dependency dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun <T : ModuleDependency> DependencyHandler.`dokkaHtmlGeneratorRuntime`(
    dependency: T,
    dependencyConfiguration: T.() -> Unit
): T = add("dokkaHtmlGeneratorRuntime", dependency, dependencyConfiguration)

/**
 * Adds a dependency to the 'dokkaHtmlGeneratorRuntime' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaHtmlGeneratorRuntime`(
    dependencyNotation: Provider<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaHtmlGeneratorRuntime", dependencyNotation, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaHtmlGeneratorRuntime' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaHtmlGeneratorRuntime`(
    dependencyNotation: ProviderConvertible<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaHtmlGeneratorRuntime", dependencyNotation, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaHtmlGeneratorRuntime' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaHtmlGeneratorRuntime`(
    dependencyNotation: String,
    dependencyConfiguration: Action<ExternalModuleDependency>
): ExternalModuleDependency = addDependencyTo(
    this, "dokkaHtmlGeneratorRuntime", dependencyNotation, dependencyConfiguration
) as ExternalModuleDependency

/**
 * Adds a dependency to the 'dokkaHtmlGeneratorRuntime' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaHtmlGeneratorRuntime`(dependencyNotation: Any): Dependency? =
    add("dokkaHtmlGeneratorRuntime", dependencyNotation)

/**
 * Adds a dependency to the 'dokkaHtmlGeneratorRuntime' configuration.
 *
 * @param group the group of the module to be added as a dependency.
 * @param name the name of the module to be added as a dependency.
 * @param version the optional version of the module to be added as a dependency.
 * @param configuration the optional configuration of the module to be added as a dependency.
 * @param classifier the optional classifier of the module artifact to be added as a dependency.
 * @param ext the optional extension of the module artifact to be added as a dependency.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.create]
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaHtmlGeneratorRuntime`(
    group: String,
    name: String,
    version: String? = null,
    configuration: String? = null,
    classifier: String? = null,
    ext: String? = null,
    dependencyConfiguration: Action<ExternalModuleDependency>? = null
): ExternalModuleDependency = addExternalModuleDependencyTo(
    this, "dokkaHtmlGeneratorRuntime", group, name, version, configuration, classifier, ext, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaHtmlGeneratorRuntimeResolver.internal' configuration.
 *
 * @param dependency dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun <T : ModuleDependency> DependencyHandler.`dokkaHtmlGeneratorRuntimeResolver.internal`(
    dependency: T,
    dependencyConfiguration: T.() -> Unit
): T = add("dokkaHtmlGeneratorRuntimeResolver.internal", dependency, dependencyConfiguration)

/**
 * Adds a dependency to the 'dokkaHtmlGeneratorRuntimeResolver.internal' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaHtmlGeneratorRuntimeResolver.internal`(
    dependencyNotation: Provider<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaHtmlGeneratorRuntimeResolver.internal", dependencyNotation, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaHtmlGeneratorRuntimeResolver.internal' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaHtmlGeneratorRuntimeResolver.internal`(
    dependencyNotation: ProviderConvertible<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaHtmlGeneratorRuntimeResolver.internal", dependencyNotation, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaHtmlGeneratorRuntimeResolver.internal' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaHtmlGeneratorRuntimeResolver.internal`(
    dependencyNotation: String,
    dependencyConfiguration: Action<ExternalModuleDependency>
): ExternalModuleDependency = addDependencyTo(
    this, "dokkaHtmlGeneratorRuntimeResolver.internal", dependencyNotation, dependencyConfiguration
) as ExternalModuleDependency

/**
 * Adds a dependency to the 'dokkaHtmlGeneratorRuntimeResolver.internal' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaHtmlGeneratorRuntimeResolver.internal`(dependencyNotation: Any): Dependency? =
    add("dokkaHtmlGeneratorRuntimeResolver.internal", dependencyNotation)

/**
 * Adds a dependency to the 'dokkaHtmlGeneratorRuntimeResolver.internal' configuration.
 *
 * @param group the group of the module to be added as a dependency.
 * @param name the name of the module to be added as a dependency.
 * @param version the optional version of the module to be added as a dependency.
 * @param configuration the optional configuration of the module to be added as a dependency.
 * @param classifier the optional classifier of the module artifact to be added as a dependency.
 * @param ext the optional extension of the module artifact to be added as a dependency.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.create]
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaHtmlGeneratorRuntimeResolver.internal`(
    group: String,
    name: String,
    version: String? = null,
    configuration: String? = null,
    classifier: String? = null,
    ext: String? = null,
    dependencyConfiguration: Action<ExternalModuleDependency>? = null
): ExternalModuleDependency = addExternalModuleDependencyTo(
    this, "dokkaHtmlGeneratorRuntimeResolver.internal", group, name, version, configuration, classifier, ext, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaHtmlModuleOutputDirectoriesConsumable.internal' configuration.
 *
 * @param dependency dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun <T : ModuleDependency> DependencyHandler.`dokkaHtmlModuleOutputDirectoriesConsumable.internal`(
    dependency: T,
    dependencyConfiguration: T.() -> Unit
): T = add("dokkaHtmlModuleOutputDirectoriesConsumable.internal", dependency, dependencyConfiguration)

/**
 * Adds a dependency to the 'dokkaHtmlModuleOutputDirectoriesConsumable.internal' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaHtmlModuleOutputDirectoriesConsumable.internal`(
    dependencyNotation: Provider<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaHtmlModuleOutputDirectoriesConsumable.internal", dependencyNotation, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaHtmlModuleOutputDirectoriesConsumable.internal' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaHtmlModuleOutputDirectoriesConsumable.internal`(
    dependencyNotation: ProviderConvertible<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaHtmlModuleOutputDirectoriesConsumable.internal", dependencyNotation, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaHtmlModuleOutputDirectoriesConsumable.internal' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaHtmlModuleOutputDirectoriesConsumable.internal`(
    dependencyNotation: String,
    dependencyConfiguration: Action<ExternalModuleDependency>
): ExternalModuleDependency = addDependencyTo(
    this, "dokkaHtmlModuleOutputDirectoriesConsumable.internal", dependencyNotation, dependencyConfiguration
) as ExternalModuleDependency

/**
 * Adds a dependency to the 'dokkaHtmlModuleOutputDirectoriesConsumable.internal' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaHtmlModuleOutputDirectoriesConsumable.internal`(dependencyNotation: Any): Dependency? =
    add("dokkaHtmlModuleOutputDirectoriesConsumable.internal", dependencyNotation)

/**
 * Adds a dependency to the 'dokkaHtmlModuleOutputDirectoriesConsumable.internal' configuration.
 *
 * @param group the group of the module to be added as a dependency.
 * @param name the name of the module to be added as a dependency.
 * @param version the optional version of the module to be added as a dependency.
 * @param configuration the optional configuration of the module to be added as a dependency.
 * @param classifier the optional classifier of the module artifact to be added as a dependency.
 * @param ext the optional extension of the module artifact to be added as a dependency.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.create]
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaHtmlModuleOutputDirectoriesConsumable.internal`(
    group: String,
    name: String,
    version: String? = null,
    configuration: String? = null,
    classifier: String? = null,
    ext: String? = null,
    dependencyConfiguration: Action<ExternalModuleDependency>? = null
): ExternalModuleDependency = addExternalModuleDependencyTo(
    this, "dokkaHtmlModuleOutputDirectoriesConsumable.internal", group, name, version, configuration, classifier, ext, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaHtmlModuleOutputDirectoriesResolver.internal' configuration.
 *
 * @param dependency dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun <T : ModuleDependency> DependencyHandler.`dokkaHtmlModuleOutputDirectoriesResolver.internal`(
    dependency: T,
    dependencyConfiguration: T.() -> Unit
): T = add("dokkaHtmlModuleOutputDirectoriesResolver.internal", dependency, dependencyConfiguration)

/**
 * Adds a dependency to the 'dokkaHtmlModuleOutputDirectoriesResolver.internal' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaHtmlModuleOutputDirectoriesResolver.internal`(
    dependencyNotation: Provider<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaHtmlModuleOutputDirectoriesResolver.internal", dependencyNotation, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaHtmlModuleOutputDirectoriesResolver.internal' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaHtmlModuleOutputDirectoriesResolver.internal`(
    dependencyNotation: ProviderConvertible<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaHtmlModuleOutputDirectoriesResolver.internal", dependencyNotation, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaHtmlModuleOutputDirectoriesResolver.internal' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaHtmlModuleOutputDirectoriesResolver.internal`(
    dependencyNotation: String,
    dependencyConfiguration: Action<ExternalModuleDependency>
): ExternalModuleDependency = addDependencyTo(
    this, "dokkaHtmlModuleOutputDirectoriesResolver.internal", dependencyNotation, dependencyConfiguration
) as ExternalModuleDependency

/**
 * Adds a dependency to the 'dokkaHtmlModuleOutputDirectoriesResolver.internal' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaHtmlModuleOutputDirectoriesResolver.internal`(dependencyNotation: Any): Dependency? =
    add("dokkaHtmlModuleOutputDirectoriesResolver.internal", dependencyNotation)

/**
 * Adds a dependency to the 'dokkaHtmlModuleOutputDirectoriesResolver.internal' configuration.
 *
 * @param group the group of the module to be added as a dependency.
 * @param name the name of the module to be added as a dependency.
 * @param version the optional version of the module to be added as a dependency.
 * @param configuration the optional configuration of the module to be added as a dependency.
 * @param classifier the optional classifier of the module artifact to be added as a dependency.
 * @param ext the optional extension of the module artifact to be added as a dependency.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.create]
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaHtmlModuleOutputDirectoriesResolver.internal`(
    group: String,
    name: String,
    version: String? = null,
    configuration: String? = null,
    classifier: String? = null,
    ext: String? = null,
    dependencyConfiguration: Action<ExternalModuleDependency>? = null
): ExternalModuleDependency = addExternalModuleDependencyTo(
    this, "dokkaHtmlModuleOutputDirectoriesResolver.internal", group, name, version, configuration, classifier, ext, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaHtmlPartialRuntime' configuration.
 *
 * @param dependency dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaHtmlPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlGeneratorClasspath' configuration instead.")
fun <T : ModuleDependency> DependencyHandler.`dokkaHtmlPartialRuntime`(
    dependency: T,
    dependencyConfiguration: T.() -> Unit
): T = add("dokkaHtmlPartialRuntime", dependency, dependencyConfiguration)

/**
 * Adds a dependency to the 'dokkaHtmlPartialRuntime' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaHtmlPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlGeneratorClasspath' configuration instead.")
fun DependencyHandler.`dokkaHtmlPartialRuntime`(
    dependencyNotation: Provider<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaHtmlPartialRuntime", dependencyNotation, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaHtmlPartialRuntime' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaHtmlPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlGeneratorClasspath' configuration instead.")
fun DependencyHandler.`dokkaHtmlPartialRuntime`(
    dependencyNotation: ProviderConvertible<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaHtmlPartialRuntime", dependencyNotation, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaHtmlPartialRuntime' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaHtmlPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlGeneratorClasspath' configuration instead.")
fun DependencyHandler.`dokkaHtmlPartialRuntime`(
    dependencyNotation: String,
    dependencyConfiguration: Action<ExternalModuleDependency>
): ExternalModuleDependency = addDependencyTo(
    this, "dokkaHtmlPartialRuntime", dependencyNotation, dependencyConfiguration
) as ExternalModuleDependency

/**
 * Adds a dependency to the 'dokkaHtmlPartialRuntime' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaHtmlPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlGeneratorClasspath' configuration instead.")
fun DependencyHandler.`dokkaHtmlPartialRuntime`(dependencyNotation: Any): Dependency? =
    add("dokkaHtmlPartialRuntime", dependencyNotation)

/**
 * Adds a dependency to the 'dokkaHtmlPartialRuntime' configuration.
 *
 * @param group the group of the module to be added as a dependency.
 * @param name the name of the module to be added as a dependency.
 * @param version the optional version of the module to be added as a dependency.
 * @param configuration the optional configuration of the module to be added as a dependency.
 * @param classifier the optional classifier of the module artifact to be added as a dependency.
 * @param ext the optional extension of the module artifact to be added as a dependency.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.create]
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaHtmlPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlGeneratorClasspath' configuration instead.")
fun DependencyHandler.`dokkaHtmlPartialRuntime`(
    group: String,
    name: String,
    version: String? = null,
    configuration: String? = null,
    classifier: String? = null,
    ext: String? = null,
    dependencyConfiguration: Action<ExternalModuleDependency>? = null
): ExternalModuleDependency = addExternalModuleDependencyTo(
    this, "dokkaHtmlPartialRuntime", group, name, version, configuration, classifier, ext, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaHtmlPlugin' configuration.
 *
 * @param dependency dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun <T : ModuleDependency> DependencyHandler.`dokkaHtmlPlugin`(
    dependency: T,
    dependencyConfiguration: T.() -> Unit
): T = add("dokkaHtmlPlugin", dependency, dependencyConfiguration)

/**
 * Adds a dependency to the 'dokkaHtmlPlugin' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaHtmlPlugin`(
    dependencyNotation: Provider<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaHtmlPlugin", dependencyNotation, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaHtmlPlugin' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaHtmlPlugin`(
    dependencyNotation: ProviderConvertible<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaHtmlPlugin", dependencyNotation, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaHtmlPlugin' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaHtmlPlugin`(
    dependencyNotation: String,
    dependencyConfiguration: Action<ExternalModuleDependency>
): ExternalModuleDependency = addDependencyTo(
    this, "dokkaHtmlPlugin", dependencyNotation, dependencyConfiguration
) as ExternalModuleDependency

/**
 * Adds a dependency to the 'dokkaHtmlPlugin' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaHtmlPlugin`(dependencyNotation: Any): Dependency? =
    add("dokkaHtmlPlugin", dependencyNotation)

/**
 * Adds a dependency to the 'dokkaHtmlPlugin' configuration.
 *
 * @param group the group of the module to be added as a dependency.
 * @param name the name of the module to be added as a dependency.
 * @param version the optional version of the module to be added as a dependency.
 * @param configuration the optional configuration of the module to be added as a dependency.
 * @param classifier the optional classifier of the module artifact to be added as a dependency.
 * @param ext the optional extension of the module artifact to be added as a dependency.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.create]
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaHtmlPlugin`(
    group: String,
    name: String,
    version: String? = null,
    configuration: String? = null,
    classifier: String? = null,
    ext: String? = null,
    dependencyConfiguration: Action<ExternalModuleDependency>? = null
): ExternalModuleDependency = addExternalModuleDependencyTo(
    this, "dokkaHtmlPlugin", group, name, version, configuration, classifier, ext, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaHtmlPluginIntransitiveResolver.internal' configuration.
 *
 * @param dependency dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun <T : ModuleDependency> DependencyHandler.`dokkaHtmlPluginIntransitiveResolver.internal`(
    dependency: T,
    dependencyConfiguration: T.() -> Unit
): T = add("dokkaHtmlPluginIntransitiveResolver.internal", dependency, dependencyConfiguration)

/**
 * Adds a dependency to the 'dokkaHtmlPluginIntransitiveResolver.internal' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaHtmlPluginIntransitiveResolver.internal`(
    dependencyNotation: Provider<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaHtmlPluginIntransitiveResolver.internal", dependencyNotation, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaHtmlPluginIntransitiveResolver.internal' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaHtmlPluginIntransitiveResolver.internal`(
    dependencyNotation: ProviderConvertible<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaHtmlPluginIntransitiveResolver.internal", dependencyNotation, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaHtmlPluginIntransitiveResolver.internal' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaHtmlPluginIntransitiveResolver.internal`(
    dependencyNotation: String,
    dependencyConfiguration: Action<ExternalModuleDependency>
): ExternalModuleDependency = addDependencyTo(
    this, "dokkaHtmlPluginIntransitiveResolver.internal", dependencyNotation, dependencyConfiguration
) as ExternalModuleDependency

/**
 * Adds a dependency to the 'dokkaHtmlPluginIntransitiveResolver.internal' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaHtmlPluginIntransitiveResolver.internal`(dependencyNotation: Any): Dependency? =
    add("dokkaHtmlPluginIntransitiveResolver.internal", dependencyNotation)

/**
 * Adds a dependency to the 'dokkaHtmlPluginIntransitiveResolver.internal' configuration.
 *
 * @param group the group of the module to be added as a dependency.
 * @param name the name of the module to be added as a dependency.
 * @param version the optional version of the module to be added as a dependency.
 * @param configuration the optional configuration of the module to be added as a dependency.
 * @param classifier the optional classifier of the module artifact to be added as a dependency.
 * @param ext the optional extension of the module artifact to be added as a dependency.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.create]
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaHtmlPluginIntransitiveResolver.internal`(
    group: String,
    name: String,
    version: String? = null,
    configuration: String? = null,
    classifier: String? = null,
    ext: String? = null,
    dependencyConfiguration: Action<ExternalModuleDependency>? = null
): ExternalModuleDependency = addExternalModuleDependencyTo(
    this, "dokkaHtmlPluginIntransitiveResolver.internal", group, name, version, configuration, classifier, ext, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaHtmlPublicationPlugin' configuration.
 *
 * @param dependency dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun <T : ModuleDependency> DependencyHandler.`dokkaHtmlPublicationPlugin`(
    dependency: T,
    dependencyConfiguration: T.() -> Unit
): T = add("dokkaHtmlPublicationPlugin", dependency, dependencyConfiguration)

/**
 * Adds a dependency to the 'dokkaHtmlPublicationPlugin' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaHtmlPublicationPlugin`(
    dependencyNotation: Provider<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaHtmlPublicationPlugin", dependencyNotation, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaHtmlPublicationPlugin' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaHtmlPublicationPlugin`(
    dependencyNotation: ProviderConvertible<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaHtmlPublicationPlugin", dependencyNotation, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaHtmlPublicationPlugin' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaHtmlPublicationPlugin`(
    dependencyNotation: String,
    dependencyConfiguration: Action<ExternalModuleDependency>
): ExternalModuleDependency = addDependencyTo(
    this, "dokkaHtmlPublicationPlugin", dependencyNotation, dependencyConfiguration
) as ExternalModuleDependency

/**
 * Adds a dependency to the 'dokkaHtmlPublicationPlugin' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaHtmlPublicationPlugin`(dependencyNotation: Any): Dependency? =
    add("dokkaHtmlPublicationPlugin", dependencyNotation)

/**
 * Adds a dependency to the 'dokkaHtmlPublicationPlugin' configuration.
 *
 * @param group the group of the module to be added as a dependency.
 * @param name the name of the module to be added as a dependency.
 * @param version the optional version of the module to be added as a dependency.
 * @param configuration the optional configuration of the module to be added as a dependency.
 * @param classifier the optional classifier of the module artifact to be added as a dependency.
 * @param ext the optional extension of the module artifact to be added as a dependency.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.create]
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaHtmlPublicationPlugin`(
    group: String,
    name: String,
    version: String? = null,
    configuration: String? = null,
    classifier: String? = null,
    ext: String? = null,
    dependencyConfiguration: Action<ExternalModuleDependency>? = null
): ExternalModuleDependency = addExternalModuleDependencyTo(
    this, "dokkaHtmlPublicationPlugin", group, name, version, configuration, classifier, ext, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaHtmlPublicationPluginApiOnly.internal' configuration.
 *
 * @param dependency dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun <T : ModuleDependency> DependencyHandler.`dokkaHtmlPublicationPluginApiOnly.internal`(
    dependency: T,
    dependencyConfiguration: T.() -> Unit
): T = add("dokkaHtmlPublicationPluginApiOnly.internal", dependency, dependencyConfiguration)

/**
 * Adds a dependency to the 'dokkaHtmlPublicationPluginApiOnly.internal' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaHtmlPublicationPluginApiOnly.internal`(
    dependencyNotation: Provider<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaHtmlPublicationPluginApiOnly.internal", dependencyNotation, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaHtmlPublicationPluginApiOnly.internal' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaHtmlPublicationPluginApiOnly.internal`(
    dependencyNotation: ProviderConvertible<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaHtmlPublicationPluginApiOnly.internal", dependencyNotation, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaHtmlPublicationPluginApiOnly.internal' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaHtmlPublicationPluginApiOnly.internal`(
    dependencyNotation: String,
    dependencyConfiguration: Action<ExternalModuleDependency>
): ExternalModuleDependency = addDependencyTo(
    this, "dokkaHtmlPublicationPluginApiOnly.internal", dependencyNotation, dependencyConfiguration
) as ExternalModuleDependency

/**
 * Adds a dependency to the 'dokkaHtmlPublicationPluginApiOnly.internal' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaHtmlPublicationPluginApiOnly.internal`(dependencyNotation: Any): Dependency? =
    add("dokkaHtmlPublicationPluginApiOnly.internal", dependencyNotation)

/**
 * Adds a dependency to the 'dokkaHtmlPublicationPluginApiOnly.internal' configuration.
 *
 * @param group the group of the module to be added as a dependency.
 * @param name the name of the module to be added as a dependency.
 * @param version the optional version of the module to be added as a dependency.
 * @param configuration the optional configuration of the module to be added as a dependency.
 * @param classifier the optional classifier of the module artifact to be added as a dependency.
 * @param ext the optional extension of the module artifact to be added as a dependency.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.create]
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaHtmlPublicationPluginApiOnly.internal`(
    group: String,
    name: String,
    version: String? = null,
    configuration: String? = null,
    classifier: String? = null,
    ext: String? = null,
    dependencyConfiguration: Action<ExternalModuleDependency>? = null
): ExternalModuleDependency = addExternalModuleDependencyTo(
    this, "dokkaHtmlPublicationPluginApiOnly.internal", group, name, version, configuration, classifier, ext, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaHtmlPublicationPluginApiOnlyConsumable.internal' configuration.
 *
 * @param dependency dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun <T : ModuleDependency> DependencyHandler.`dokkaHtmlPublicationPluginApiOnlyConsumable.internal`(
    dependency: T,
    dependencyConfiguration: T.() -> Unit
): T = add("dokkaHtmlPublicationPluginApiOnlyConsumable.internal", dependency, dependencyConfiguration)

/**
 * Adds a dependency to the 'dokkaHtmlPublicationPluginApiOnlyConsumable.internal' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaHtmlPublicationPluginApiOnlyConsumable.internal`(
    dependencyNotation: Provider<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaHtmlPublicationPluginApiOnlyConsumable.internal", dependencyNotation, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaHtmlPublicationPluginApiOnlyConsumable.internal' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaHtmlPublicationPluginApiOnlyConsumable.internal`(
    dependencyNotation: ProviderConvertible<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaHtmlPublicationPluginApiOnlyConsumable.internal", dependencyNotation, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaHtmlPublicationPluginApiOnlyConsumable.internal' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaHtmlPublicationPluginApiOnlyConsumable.internal`(
    dependencyNotation: String,
    dependencyConfiguration: Action<ExternalModuleDependency>
): ExternalModuleDependency = addDependencyTo(
    this, "dokkaHtmlPublicationPluginApiOnlyConsumable.internal", dependencyNotation, dependencyConfiguration
) as ExternalModuleDependency

/**
 * Adds a dependency to the 'dokkaHtmlPublicationPluginApiOnlyConsumable.internal' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaHtmlPublicationPluginApiOnlyConsumable.internal`(dependencyNotation: Any): Dependency? =
    add("dokkaHtmlPublicationPluginApiOnlyConsumable.internal", dependencyNotation)

/**
 * Adds a dependency to the 'dokkaHtmlPublicationPluginApiOnlyConsumable.internal' configuration.
 *
 * @param group the group of the module to be added as a dependency.
 * @param name the name of the module to be added as a dependency.
 * @param version the optional version of the module to be added as a dependency.
 * @param configuration the optional configuration of the module to be added as a dependency.
 * @param classifier the optional classifier of the module artifact to be added as a dependency.
 * @param ext the optional extension of the module artifact to be added as a dependency.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.create]
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaHtmlPublicationPluginApiOnlyConsumable.internal`(
    group: String,
    name: String,
    version: String? = null,
    configuration: String? = null,
    classifier: String? = null,
    ext: String? = null,
    dependencyConfiguration: Action<ExternalModuleDependency>? = null
): ExternalModuleDependency = addExternalModuleDependencyTo(
    this, "dokkaHtmlPublicationPluginApiOnlyConsumable.internal", group, name, version, configuration, classifier, ext, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaHtmlPublicationPluginResolver.internal' configuration.
 *
 * @param dependency dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun <T : ModuleDependency> DependencyHandler.`dokkaHtmlPublicationPluginResolver.internal`(
    dependency: T,
    dependencyConfiguration: T.() -> Unit
): T = add("dokkaHtmlPublicationPluginResolver.internal", dependency, dependencyConfiguration)

/**
 * Adds a dependency to the 'dokkaHtmlPublicationPluginResolver.internal' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaHtmlPublicationPluginResolver.internal`(
    dependencyNotation: Provider<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaHtmlPublicationPluginResolver.internal", dependencyNotation, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaHtmlPublicationPluginResolver.internal' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaHtmlPublicationPluginResolver.internal`(
    dependencyNotation: ProviderConvertible<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaHtmlPublicationPluginResolver.internal", dependencyNotation, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaHtmlPublicationPluginResolver.internal' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaHtmlPublicationPluginResolver.internal`(
    dependencyNotation: String,
    dependencyConfiguration: Action<ExternalModuleDependency>
): ExternalModuleDependency = addDependencyTo(
    this, "dokkaHtmlPublicationPluginResolver.internal", dependencyNotation, dependencyConfiguration
) as ExternalModuleDependency

/**
 * Adds a dependency to the 'dokkaHtmlPublicationPluginResolver.internal' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaHtmlPublicationPluginResolver.internal`(dependencyNotation: Any): Dependency? =
    add("dokkaHtmlPublicationPluginResolver.internal", dependencyNotation)

/**
 * Adds a dependency to the 'dokkaHtmlPublicationPluginResolver.internal' configuration.
 *
 * @param group the group of the module to be added as a dependency.
 * @param name the name of the module to be added as a dependency.
 * @param version the optional version of the module to be added as a dependency.
 * @param configuration the optional configuration of the module to be added as a dependency.
 * @param classifier the optional classifier of the module artifact to be added as a dependency.
 * @param ext the optional extension of the module artifact to be added as a dependency.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.create]
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaHtmlPublicationPluginResolver.internal`(
    group: String,
    name: String,
    version: String? = null,
    configuration: String? = null,
    classifier: String? = null,
    ext: String? = null,
    dependencyConfiguration: Action<ExternalModuleDependency>? = null
): ExternalModuleDependency = addExternalModuleDependencyTo(
    this, "dokkaHtmlPublicationPluginResolver.internal", group, name, version, configuration, classifier, ext, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaHtmlRuntime' configuration.
 *
 * @param dependency dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaHtmlRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlGeneratorClasspath' configuration instead.")
fun <T : ModuleDependency> DependencyHandler.`dokkaHtmlRuntime`(
    dependency: T,
    dependencyConfiguration: T.() -> Unit
): T = add("dokkaHtmlRuntime", dependency, dependencyConfiguration)

/**
 * Adds a dependency to the 'dokkaHtmlRuntime' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaHtmlRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlGeneratorClasspath' configuration instead.")
fun DependencyHandler.`dokkaHtmlRuntime`(
    dependencyNotation: Provider<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaHtmlRuntime", dependencyNotation, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaHtmlRuntime' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaHtmlRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlGeneratorClasspath' configuration instead.")
fun DependencyHandler.`dokkaHtmlRuntime`(
    dependencyNotation: ProviderConvertible<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaHtmlRuntime", dependencyNotation, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaHtmlRuntime' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaHtmlRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlGeneratorClasspath' configuration instead.")
fun DependencyHandler.`dokkaHtmlRuntime`(
    dependencyNotation: String,
    dependencyConfiguration: Action<ExternalModuleDependency>
): ExternalModuleDependency = addDependencyTo(
    this, "dokkaHtmlRuntime", dependencyNotation, dependencyConfiguration
) as ExternalModuleDependency

/**
 * Adds a dependency to the 'dokkaHtmlRuntime' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaHtmlRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlGeneratorClasspath' configuration instead.")
fun DependencyHandler.`dokkaHtmlRuntime`(dependencyNotation: Any): Dependency? =
    add("dokkaHtmlRuntime", dependencyNotation)

/**
 * Adds a dependency to the 'dokkaHtmlRuntime' configuration.
 *
 * @param group the group of the module to be added as a dependency.
 * @param name the name of the module to be added as a dependency.
 * @param version the optional version of the module to be added as a dependency.
 * @param configuration the optional configuration of the module to be added as a dependency.
 * @param classifier the optional classifier of the module artifact to be added as a dependency.
 * @param ext the optional extension of the module artifact to be added as a dependency.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.create]
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaHtmlRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlGeneratorClasspath' configuration instead.")
fun DependencyHandler.`dokkaHtmlRuntime`(
    group: String,
    name: String,
    version: String? = null,
    configuration: String? = null,
    classifier: String? = null,
    ext: String? = null,
    dependencyConfiguration: Action<ExternalModuleDependency>? = null
): ExternalModuleDependency = addExternalModuleDependencyTo(
    this, "dokkaHtmlRuntime", group, name, version, configuration, classifier, ext, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaJavadocPartialPlugin' configuration.
 *
 * @param dependency dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaJavadocPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJavadocPlugin' configuration instead.")
fun <T : ModuleDependency> DependencyHandler.`dokkaJavadocPartialPlugin`(
    dependency: T,
    dependencyConfiguration: T.() -> Unit
): T = add("dokkaJavadocPartialPlugin", dependency, dependencyConfiguration)

/**
 * Adds a dependency to the 'dokkaJavadocPartialPlugin' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaJavadocPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJavadocPlugin' configuration instead.")
fun DependencyHandler.`dokkaJavadocPartialPlugin`(
    dependencyNotation: Provider<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaJavadocPartialPlugin", dependencyNotation, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaJavadocPartialPlugin' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaJavadocPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJavadocPlugin' configuration instead.")
fun DependencyHandler.`dokkaJavadocPartialPlugin`(
    dependencyNotation: ProviderConvertible<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaJavadocPartialPlugin", dependencyNotation, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaJavadocPartialPlugin' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaJavadocPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJavadocPlugin' configuration instead.")
fun DependencyHandler.`dokkaJavadocPartialPlugin`(
    dependencyNotation: String,
    dependencyConfiguration: Action<ExternalModuleDependency>
): ExternalModuleDependency = addDependencyTo(
    this, "dokkaJavadocPartialPlugin", dependencyNotation, dependencyConfiguration
) as ExternalModuleDependency

/**
 * Adds a dependency to the 'dokkaJavadocPartialPlugin' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaJavadocPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJavadocPlugin' configuration instead.")
fun DependencyHandler.`dokkaJavadocPartialPlugin`(dependencyNotation: Any): Dependency? =
    add("dokkaJavadocPartialPlugin", dependencyNotation)

/**
 * Adds a dependency to the 'dokkaJavadocPartialPlugin' configuration.
 *
 * @param group the group of the module to be added as a dependency.
 * @param name the name of the module to be added as a dependency.
 * @param version the optional version of the module to be added as a dependency.
 * @param configuration the optional configuration of the module to be added as a dependency.
 * @param classifier the optional classifier of the module artifact to be added as a dependency.
 * @param ext the optional extension of the module artifact to be added as a dependency.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.create]
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaJavadocPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJavadocPlugin' configuration instead.")
fun DependencyHandler.`dokkaJavadocPartialPlugin`(
    group: String,
    name: String,
    version: String? = null,
    configuration: String? = null,
    classifier: String? = null,
    ext: String? = null,
    dependencyConfiguration: Action<ExternalModuleDependency>? = null
): ExternalModuleDependency = addExternalModuleDependencyTo(
    this, "dokkaJavadocPartialPlugin", group, name, version, configuration, classifier, ext, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaJavadocPartialRuntime' configuration.
 *
 * @param dependency dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaJavadocPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJavadocGeneratorClasspath' configuration instead.")
fun <T : ModuleDependency> DependencyHandler.`dokkaJavadocPartialRuntime`(
    dependency: T,
    dependencyConfiguration: T.() -> Unit
): T = add("dokkaJavadocPartialRuntime", dependency, dependencyConfiguration)

/**
 * Adds a dependency to the 'dokkaJavadocPartialRuntime' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaJavadocPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJavadocGeneratorClasspath' configuration instead.")
fun DependencyHandler.`dokkaJavadocPartialRuntime`(
    dependencyNotation: Provider<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaJavadocPartialRuntime", dependencyNotation, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaJavadocPartialRuntime' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaJavadocPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJavadocGeneratorClasspath' configuration instead.")
fun DependencyHandler.`dokkaJavadocPartialRuntime`(
    dependencyNotation: ProviderConvertible<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaJavadocPartialRuntime", dependencyNotation, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaJavadocPartialRuntime' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaJavadocPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJavadocGeneratorClasspath' configuration instead.")
fun DependencyHandler.`dokkaJavadocPartialRuntime`(
    dependencyNotation: String,
    dependencyConfiguration: Action<ExternalModuleDependency>
): ExternalModuleDependency = addDependencyTo(
    this, "dokkaJavadocPartialRuntime", dependencyNotation, dependencyConfiguration
) as ExternalModuleDependency

/**
 * Adds a dependency to the 'dokkaJavadocPartialRuntime' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaJavadocPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJavadocGeneratorClasspath' configuration instead.")
fun DependencyHandler.`dokkaJavadocPartialRuntime`(dependencyNotation: Any): Dependency? =
    add("dokkaJavadocPartialRuntime", dependencyNotation)

/**
 * Adds a dependency to the 'dokkaJavadocPartialRuntime' configuration.
 *
 * @param group the group of the module to be added as a dependency.
 * @param name the name of the module to be added as a dependency.
 * @param version the optional version of the module to be added as a dependency.
 * @param configuration the optional configuration of the module to be added as a dependency.
 * @param classifier the optional classifier of the module artifact to be added as a dependency.
 * @param ext the optional extension of the module artifact to be added as a dependency.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.create]
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaJavadocPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJavadocGeneratorClasspath' configuration instead.")
fun DependencyHandler.`dokkaJavadocPartialRuntime`(
    group: String,
    name: String,
    version: String? = null,
    configuration: String? = null,
    classifier: String? = null,
    ext: String? = null,
    dependencyConfiguration: Action<ExternalModuleDependency>? = null
): ExternalModuleDependency = addExternalModuleDependencyTo(
    this, "dokkaJavadocPartialRuntime", group, name, version, configuration, classifier, ext, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaJavadocPlugin' configuration.
 *
 * @param dependency dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaJavadocPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJavadocPlugin' configuration instead.")
fun <T : ModuleDependency> DependencyHandler.`dokkaJavadocPlugin`(
    dependency: T,
    dependencyConfiguration: T.() -> Unit
): T = add("dokkaJavadocPlugin", dependency, dependencyConfiguration)

/**
 * Adds a dependency to the 'dokkaJavadocPlugin' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaJavadocPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJavadocPlugin' configuration instead.")
fun DependencyHandler.`dokkaJavadocPlugin`(
    dependencyNotation: Provider<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaJavadocPlugin", dependencyNotation, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaJavadocPlugin' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaJavadocPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJavadocPlugin' configuration instead.")
fun DependencyHandler.`dokkaJavadocPlugin`(
    dependencyNotation: ProviderConvertible<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaJavadocPlugin", dependencyNotation, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaJavadocPlugin' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaJavadocPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJavadocPlugin' configuration instead.")
fun DependencyHandler.`dokkaJavadocPlugin`(
    dependencyNotation: String,
    dependencyConfiguration: Action<ExternalModuleDependency>
): ExternalModuleDependency = addDependencyTo(
    this, "dokkaJavadocPlugin", dependencyNotation, dependencyConfiguration
) as ExternalModuleDependency

/**
 * Adds a dependency to the 'dokkaJavadocPlugin' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaJavadocPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJavadocPlugin' configuration instead.")
fun DependencyHandler.`dokkaJavadocPlugin`(dependencyNotation: Any): Dependency? =
    add("dokkaJavadocPlugin", dependencyNotation)

/**
 * Adds a dependency to the 'dokkaJavadocPlugin' configuration.
 *
 * @param group the group of the module to be added as a dependency.
 * @param name the name of the module to be added as a dependency.
 * @param version the optional version of the module to be added as a dependency.
 * @param configuration the optional configuration of the module to be added as a dependency.
 * @param classifier the optional classifier of the module artifact to be added as a dependency.
 * @param ext the optional extension of the module artifact to be added as a dependency.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.create]
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaJavadocPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJavadocPlugin' configuration instead.")
fun DependencyHandler.`dokkaJavadocPlugin`(
    group: String,
    name: String,
    version: String? = null,
    configuration: String? = null,
    classifier: String? = null,
    ext: String? = null,
    dependencyConfiguration: Action<ExternalModuleDependency>? = null
): ExternalModuleDependency = addExternalModuleDependencyTo(
    this, "dokkaJavadocPlugin", group, name, version, configuration, classifier, ext, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaJavadocRuntime' configuration.
 *
 * @param dependency dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaJavadocRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJavadocGeneratorClasspath' configuration instead.")
fun <T : ModuleDependency> DependencyHandler.`dokkaJavadocRuntime`(
    dependency: T,
    dependencyConfiguration: T.() -> Unit
): T = add("dokkaJavadocRuntime", dependency, dependencyConfiguration)

/**
 * Adds a dependency to the 'dokkaJavadocRuntime' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaJavadocRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJavadocGeneratorClasspath' configuration instead.")
fun DependencyHandler.`dokkaJavadocRuntime`(
    dependencyNotation: Provider<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaJavadocRuntime", dependencyNotation, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaJavadocRuntime' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaJavadocRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJavadocGeneratorClasspath' configuration instead.")
fun DependencyHandler.`dokkaJavadocRuntime`(
    dependencyNotation: ProviderConvertible<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaJavadocRuntime", dependencyNotation, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaJavadocRuntime' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaJavadocRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJavadocGeneratorClasspath' configuration instead.")
fun DependencyHandler.`dokkaJavadocRuntime`(
    dependencyNotation: String,
    dependencyConfiguration: Action<ExternalModuleDependency>
): ExternalModuleDependency = addDependencyTo(
    this, "dokkaJavadocRuntime", dependencyNotation, dependencyConfiguration
) as ExternalModuleDependency

/**
 * Adds a dependency to the 'dokkaJavadocRuntime' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaJavadocRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJavadocGeneratorClasspath' configuration instead.")
fun DependencyHandler.`dokkaJavadocRuntime`(dependencyNotation: Any): Dependency? =
    add("dokkaJavadocRuntime", dependencyNotation)

/**
 * Adds a dependency to the 'dokkaJavadocRuntime' configuration.
 *
 * @param group the group of the module to be added as a dependency.
 * @param name the name of the module to be added as a dependency.
 * @param version the optional version of the module to be added as a dependency.
 * @param configuration the optional configuration of the module to be added as a dependency.
 * @param classifier the optional classifier of the module artifact to be added as a dependency.
 * @param ext the optional extension of the module artifact to be added as a dependency.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.create]
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaJavadocRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJavadocGeneratorClasspath' configuration instead.")
fun DependencyHandler.`dokkaJavadocRuntime`(
    group: String,
    name: String,
    version: String? = null,
    configuration: String? = null,
    classifier: String? = null,
    ext: String? = null,
    dependencyConfiguration: Action<ExternalModuleDependency>? = null
): ExternalModuleDependency = addExternalModuleDependencyTo(
    this, "dokkaJavadocRuntime", group, name, version, configuration, classifier, ext, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaJekyllPartialPlugin' configuration.
 *
 * @param dependency dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaJekyllPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllPlugin' configuration instead.")
fun <T : ModuleDependency> DependencyHandler.`dokkaJekyllPartialPlugin`(
    dependency: T,
    dependencyConfiguration: T.() -> Unit
): T = add("dokkaJekyllPartialPlugin", dependency, dependencyConfiguration)

/**
 * Adds a dependency to the 'dokkaJekyllPartialPlugin' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaJekyllPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllPlugin' configuration instead.")
fun DependencyHandler.`dokkaJekyllPartialPlugin`(
    dependencyNotation: Provider<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaJekyllPartialPlugin", dependencyNotation, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaJekyllPartialPlugin' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaJekyllPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllPlugin' configuration instead.")
fun DependencyHandler.`dokkaJekyllPartialPlugin`(
    dependencyNotation: ProviderConvertible<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaJekyllPartialPlugin", dependencyNotation, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaJekyllPartialPlugin' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaJekyllPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllPlugin' configuration instead.")
fun DependencyHandler.`dokkaJekyllPartialPlugin`(
    dependencyNotation: String,
    dependencyConfiguration: Action<ExternalModuleDependency>
): ExternalModuleDependency = addDependencyTo(
    this, "dokkaJekyllPartialPlugin", dependencyNotation, dependencyConfiguration
) as ExternalModuleDependency

/**
 * Adds a dependency to the 'dokkaJekyllPartialPlugin' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaJekyllPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllPlugin' configuration instead.")
fun DependencyHandler.`dokkaJekyllPartialPlugin`(dependencyNotation: Any): Dependency? =
    add("dokkaJekyllPartialPlugin", dependencyNotation)

/**
 * Adds a dependency to the 'dokkaJekyllPartialPlugin' configuration.
 *
 * @param group the group of the module to be added as a dependency.
 * @param name the name of the module to be added as a dependency.
 * @param version the optional version of the module to be added as a dependency.
 * @param configuration the optional configuration of the module to be added as a dependency.
 * @param classifier the optional classifier of the module artifact to be added as a dependency.
 * @param ext the optional extension of the module artifact to be added as a dependency.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.create]
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaJekyllPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllPlugin' configuration instead.")
fun DependencyHandler.`dokkaJekyllPartialPlugin`(
    group: String,
    name: String,
    version: String? = null,
    configuration: String? = null,
    classifier: String? = null,
    ext: String? = null,
    dependencyConfiguration: Action<ExternalModuleDependency>? = null
): ExternalModuleDependency = addExternalModuleDependencyTo(
    this, "dokkaJekyllPartialPlugin", group, name, version, configuration, classifier, ext, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaJekyllPartialRuntime' configuration.
 *
 * @param dependency dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaJekyllPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllGeneratorClasspath' configuration instead.")
fun <T : ModuleDependency> DependencyHandler.`dokkaJekyllPartialRuntime`(
    dependency: T,
    dependencyConfiguration: T.() -> Unit
): T = add("dokkaJekyllPartialRuntime", dependency, dependencyConfiguration)

/**
 * Adds a dependency to the 'dokkaJekyllPartialRuntime' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaJekyllPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllGeneratorClasspath' configuration instead.")
fun DependencyHandler.`dokkaJekyllPartialRuntime`(
    dependencyNotation: Provider<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaJekyllPartialRuntime", dependencyNotation, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaJekyllPartialRuntime' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaJekyllPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllGeneratorClasspath' configuration instead.")
fun DependencyHandler.`dokkaJekyllPartialRuntime`(
    dependencyNotation: ProviderConvertible<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaJekyllPartialRuntime", dependencyNotation, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaJekyllPartialRuntime' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaJekyllPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllGeneratorClasspath' configuration instead.")
fun DependencyHandler.`dokkaJekyllPartialRuntime`(
    dependencyNotation: String,
    dependencyConfiguration: Action<ExternalModuleDependency>
): ExternalModuleDependency = addDependencyTo(
    this, "dokkaJekyllPartialRuntime", dependencyNotation, dependencyConfiguration
) as ExternalModuleDependency

/**
 * Adds a dependency to the 'dokkaJekyllPartialRuntime' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaJekyllPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllGeneratorClasspath' configuration instead.")
fun DependencyHandler.`dokkaJekyllPartialRuntime`(dependencyNotation: Any): Dependency? =
    add("dokkaJekyllPartialRuntime", dependencyNotation)

/**
 * Adds a dependency to the 'dokkaJekyllPartialRuntime' configuration.
 *
 * @param group the group of the module to be added as a dependency.
 * @param name the name of the module to be added as a dependency.
 * @param version the optional version of the module to be added as a dependency.
 * @param configuration the optional configuration of the module to be added as a dependency.
 * @param classifier the optional classifier of the module artifact to be added as a dependency.
 * @param ext the optional extension of the module artifact to be added as a dependency.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.create]
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaJekyllPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllGeneratorClasspath' configuration instead.")
fun DependencyHandler.`dokkaJekyllPartialRuntime`(
    group: String,
    name: String,
    version: String? = null,
    configuration: String? = null,
    classifier: String? = null,
    ext: String? = null,
    dependencyConfiguration: Action<ExternalModuleDependency>? = null
): ExternalModuleDependency = addExternalModuleDependencyTo(
    this, "dokkaJekyllPartialRuntime", group, name, version, configuration, classifier, ext, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaJekyllPlugin' configuration.
 *
 * @param dependency dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaJekyllPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllPlugin' configuration instead.")
fun <T : ModuleDependency> DependencyHandler.`dokkaJekyllPlugin`(
    dependency: T,
    dependencyConfiguration: T.() -> Unit
): T = add("dokkaJekyllPlugin", dependency, dependencyConfiguration)

/**
 * Adds a dependency to the 'dokkaJekyllPlugin' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaJekyllPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllPlugin' configuration instead.")
fun DependencyHandler.`dokkaJekyllPlugin`(
    dependencyNotation: Provider<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaJekyllPlugin", dependencyNotation, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaJekyllPlugin' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaJekyllPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllPlugin' configuration instead.")
fun DependencyHandler.`dokkaJekyllPlugin`(
    dependencyNotation: ProviderConvertible<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaJekyllPlugin", dependencyNotation, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaJekyllPlugin' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaJekyllPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllPlugin' configuration instead.")
fun DependencyHandler.`dokkaJekyllPlugin`(
    dependencyNotation: String,
    dependencyConfiguration: Action<ExternalModuleDependency>
): ExternalModuleDependency = addDependencyTo(
    this, "dokkaJekyllPlugin", dependencyNotation, dependencyConfiguration
) as ExternalModuleDependency

/**
 * Adds a dependency to the 'dokkaJekyllPlugin' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaJekyllPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllPlugin' configuration instead.")
fun DependencyHandler.`dokkaJekyllPlugin`(dependencyNotation: Any): Dependency? =
    add("dokkaJekyllPlugin", dependencyNotation)

/**
 * Adds a dependency to the 'dokkaJekyllPlugin' configuration.
 *
 * @param group the group of the module to be added as a dependency.
 * @param name the name of the module to be added as a dependency.
 * @param version the optional version of the module to be added as a dependency.
 * @param configuration the optional configuration of the module to be added as a dependency.
 * @param classifier the optional classifier of the module artifact to be added as a dependency.
 * @param ext the optional extension of the module artifact to be added as a dependency.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.create]
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaJekyllPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllPlugin' configuration instead.")
fun DependencyHandler.`dokkaJekyllPlugin`(
    group: String,
    name: String,
    version: String? = null,
    configuration: String? = null,
    classifier: String? = null,
    ext: String? = null,
    dependencyConfiguration: Action<ExternalModuleDependency>? = null
): ExternalModuleDependency = addExternalModuleDependencyTo(
    this, "dokkaJekyllPlugin", group, name, version, configuration, classifier, ext, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaJekyllRuntime' configuration.
 *
 * @param dependency dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaJekyllRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllGeneratorClasspath' configuration instead.")
fun <T : ModuleDependency> DependencyHandler.`dokkaJekyllRuntime`(
    dependency: T,
    dependencyConfiguration: T.() -> Unit
): T = add("dokkaJekyllRuntime", dependency, dependencyConfiguration)

/**
 * Adds a dependency to the 'dokkaJekyllRuntime' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaJekyllRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllGeneratorClasspath' configuration instead.")
fun DependencyHandler.`dokkaJekyllRuntime`(
    dependencyNotation: Provider<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaJekyllRuntime", dependencyNotation, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaJekyllRuntime' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaJekyllRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllGeneratorClasspath' configuration instead.")
fun DependencyHandler.`dokkaJekyllRuntime`(
    dependencyNotation: ProviderConvertible<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaJekyllRuntime", dependencyNotation, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaJekyllRuntime' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaJekyllRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllGeneratorClasspath' configuration instead.")
fun DependencyHandler.`dokkaJekyllRuntime`(
    dependencyNotation: String,
    dependencyConfiguration: Action<ExternalModuleDependency>
): ExternalModuleDependency = addDependencyTo(
    this, "dokkaJekyllRuntime", dependencyNotation, dependencyConfiguration
) as ExternalModuleDependency

/**
 * Adds a dependency to the 'dokkaJekyllRuntime' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaJekyllRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllGeneratorClasspath' configuration instead.")
fun DependencyHandler.`dokkaJekyllRuntime`(dependencyNotation: Any): Dependency? =
    add("dokkaJekyllRuntime", dependencyNotation)

/**
 * Adds a dependency to the 'dokkaJekyllRuntime' configuration.
 *
 * @param group the group of the module to be added as a dependency.
 * @param name the name of the module to be added as a dependency.
 * @param version the optional version of the module to be added as a dependency.
 * @param configuration the optional configuration of the module to be added as a dependency.
 * @param classifier the optional classifier of the module artifact to be added as a dependency.
 * @param ext the optional extension of the module artifact to be added as a dependency.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.create]
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaJekyllRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllGeneratorClasspath' configuration instead.")
fun DependencyHandler.`dokkaJekyllRuntime`(
    group: String,
    name: String,
    version: String? = null,
    configuration: String? = null,
    classifier: String? = null,
    ext: String? = null,
    dependencyConfiguration: Action<ExternalModuleDependency>? = null
): ExternalModuleDependency = addExternalModuleDependencyTo(
    this, "dokkaJekyllRuntime", group, name, version, configuration, classifier, ext, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaPlugin' configuration.
 *
 * @param dependency dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun <T : ModuleDependency> DependencyHandler.`dokkaPlugin`(
    dependency: T,
    dependencyConfiguration: T.() -> Unit
): T = add("dokkaPlugin", dependency, dependencyConfiguration)

/**
 * Adds a dependency to the 'dokkaPlugin' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaPlugin`(
    dependencyNotation: Provider<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaPlugin", dependencyNotation, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaPlugin' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaPlugin`(
    dependencyNotation: ProviderConvertible<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaPlugin", dependencyNotation, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaPlugin' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaPlugin`(
    dependencyNotation: String,
    dependencyConfiguration: Action<ExternalModuleDependency>
): ExternalModuleDependency = addDependencyTo(
    this, "dokkaPlugin", dependencyNotation, dependencyConfiguration
) as ExternalModuleDependency

/**
 * Adds a dependency to the 'dokkaPlugin' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaPlugin`(dependencyNotation: Any): Dependency? =
    add("dokkaPlugin", dependencyNotation)

/**
 * Adds a dependency to the 'dokkaPlugin' configuration.
 *
 * @param group the group of the module to be added as a dependency.
 * @param name the name of the module to be added as a dependency.
 * @param version the optional version of the module to be added as a dependency.
 * @param configuration the optional configuration of the module to be added as a dependency.
 * @param classifier the optional classifier of the module artifact to be added as a dependency.
 * @param ext the optional extension of the module artifact to be added as a dependency.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.create]
 * @see [DependencyHandler.add]
 */
fun DependencyHandler.`dokkaPlugin`(
    group: String,
    name: String,
    version: String? = null,
    configuration: String? = null,
    classifier: String? = null,
    ext: String? = null,
    dependencyConfiguration: Action<ExternalModuleDependency>? = null
): ExternalModuleDependency = addExternalModuleDependencyTo(
    this, "dokkaPlugin", group, name, version, configuration, classifier, ext, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaRuntime' configuration.
 *
 * @param dependency dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlGeneratorRuntime' configuration instead.")
fun <T : ModuleDependency> DependencyHandler.`dokkaRuntime`(
    dependency: T,
    dependencyConfiguration: T.() -> Unit
): T = add("dokkaRuntime", dependency, dependencyConfiguration)

/**
 * Adds a dependency to the 'dokkaRuntime' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaRuntime`(
    dependencyNotation: Provider<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaRuntime", dependencyNotation, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaRuntime' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaRuntime`(
    dependencyNotation: ProviderConvertible<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaRuntime", dependencyNotation, dependencyConfiguration
)

/**
 * Adds a dependency to the 'dokkaRuntime' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaRuntime`(
    dependencyNotation: String,
    dependencyConfiguration: Action<ExternalModuleDependency>
): ExternalModuleDependency = addDependencyTo(
    this, "dokkaRuntime", dependencyNotation, dependencyConfiguration
) as ExternalModuleDependency

/**
 * Adds a dependency to the 'dokkaRuntime' configuration.
 *
 * @param dependencyNotation notation for the dependency to be added.
 * @return The dependency.
 *
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaRuntime`(dependencyNotation: Any): Dependency? =
    add("dokkaRuntime", dependencyNotation)

/**
 * Adds a dependency to the 'dokkaRuntime' configuration.
 *
 * @param group the group of the module to be added as a dependency.
 * @param name the name of the module to be added as a dependency.
 * @param version the optional version of the module to be added as a dependency.
 * @param configuration the optional configuration of the module to be added as a dependency.
 * @param classifier the optional classifier of the module artifact to be added as a dependency.
 * @param ext the optional extension of the module artifact to be added as a dependency.
 * @param dependencyConfiguration expression to use to configure the dependency.
 * @return The dependency.
 *
 * @see [DependencyHandler.create]
 * @see [DependencyHandler.add]
 */
@Deprecated(message = "The dokkaRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaRuntime`(
    group: String,
    name: String,
    version: String? = null,
    configuration: String? = null,
    classifier: String? = null,
    ext: String? = null,
    dependencyConfiguration: Action<ExternalModuleDependency>? = null
): ExternalModuleDependency = addExternalModuleDependencyTo(
    this, "dokkaRuntime", group, name, version, configuration, classifier, ext, dependencyConfiguration
)

/**
 * Adds an artifact to the 'dokka' configuration.
 *
 * @param artifactNotation the group of the module to be added as a dependency.
 * @param configureAction The action to execute to configure the artifact.
 * @return The artifact.
 *
 * @see [ArtifactHandler.add]
 */
fun ArtifactHandler.`dokka`(
    artifactNotation: Any,
    configureAction:  ConfigurablePublishArtifact.() -> Unit
): PublishArtifact =
    add("dokka", artifactNotation, configureAction)

/**
 * Adds an artifact to the 'dokka' configuration.
 *
 * @param artifactNotation the group of the module to be added as a dependency.
 * @return The artifact.
 *
 * @see [ArtifactHandler.add]
 */
fun ArtifactHandler.`dokka`(artifactNotation: Any): PublishArtifact =
    add("dokka", artifactNotation)

/**
 * Adds an artifact to the 'dokkaGfmPartialPlugin' configuration.
 *
 * @param artifactNotation the group of the module to be added as a dependency.
 * @param configureAction The action to execute to configure the artifact.
 * @return The artifact.
 *
 * @see [ArtifactHandler.add]
 */
fun ArtifactHandler.`dokkaGfmPartialPlugin`(
    artifactNotation: Any,
    configureAction:  ConfigurablePublishArtifact.() -> Unit
): PublishArtifact =
    add("dokkaGfmPartialPlugin", artifactNotation, configureAction)

/**
 * Adds an artifact to the 'dokkaGfmPartialPlugin' configuration.
 *
 * @param artifactNotation the group of the module to be added as a dependency.
 * @return The artifact.
 *
 * @see [ArtifactHandler.add]
 */
fun ArtifactHandler.`dokkaGfmPartialPlugin`(artifactNotation: Any): PublishArtifact =
    add("dokkaGfmPartialPlugin", artifactNotation)

/**
 * Adds an artifact to the 'dokkaGfmPartialRuntime' configuration.
 *
 * @param artifactNotation the group of the module to be added as a dependency.
 * @param configureAction The action to execute to configure the artifact.
 * @return The artifact.
 *
 * @see [ArtifactHandler.add]
 */
fun ArtifactHandler.`dokkaGfmPartialRuntime`(
    artifactNotation: Any,
    configureAction:  ConfigurablePublishArtifact.() -> Unit
): PublishArtifact =
    add("dokkaGfmPartialRuntime", artifactNotation, configureAction)

/**
 * Adds an artifact to the 'dokkaGfmPartialRuntime' configuration.
 *
 * @param artifactNotation the group of the module to be added as a dependency.
 * @return The artifact.
 *
 * @see [ArtifactHandler.add]
 */
fun ArtifactHandler.`dokkaGfmPartialRuntime`(artifactNotation: Any): PublishArtifact =
    add("dokkaGfmPartialRuntime", artifactNotation)

/**
 * Adds an artifact to the 'dokkaGfmPlugin' configuration.
 *
 * @param artifactNotation the group of the module to be added as a dependency.
 * @param configureAction The action to execute to configure the artifact.
 * @return The artifact.
 *
 * @see [ArtifactHandler.add]
 */
fun ArtifactHandler.`dokkaGfmPlugin`(
    artifactNotation: Any,
    configureAction:  ConfigurablePublishArtifact.() -> Unit
): PublishArtifact =
    add("dokkaGfmPlugin", artifactNotation, configureAction)

/**
 * Adds an artifact to the 'dokkaGfmPlugin' configuration.
 *
 * @param artifactNotation the group of the module to be added as a dependency.
 * @return The artifact.
 *
 * @see [ArtifactHandler.add]
 */
fun ArtifactHandler.`dokkaGfmPlugin`(artifactNotation: Any): PublishArtifact =
    add("dokkaGfmPlugin", artifactNotation)

/**
 * Adds an artifact to the 'dokkaGfmRuntime' configuration.
 *
 * @param artifactNotation the group of the module to be added as a dependency.
 * @param configureAction The action to execute to configure the artifact.
 * @return The artifact.
 *
 * @see [ArtifactHandler.add]
 */
fun ArtifactHandler.`dokkaGfmRuntime`(
    artifactNotation: Any,
    configureAction:  ConfigurablePublishArtifact.() -> Unit
): PublishArtifact =
    add("dokkaGfmRuntime", artifactNotation, configureAction)

/**
 * Adds an artifact to the 'dokkaGfmRuntime' configuration.
 *
 * @param artifactNotation the group of the module to be added as a dependency.
 * @return The artifact.
 *
 * @see [ArtifactHandler.add]
 */
fun ArtifactHandler.`dokkaGfmRuntime`(artifactNotation: Any): PublishArtifact =
    add("dokkaGfmRuntime", artifactNotation)

/**
 * Adds an artifact to the 'dokkaHtmlGeneratorRuntime' configuration.
 *
 * @param artifactNotation the group of the module to be added as a dependency.
 * @param configureAction The action to execute to configure the artifact.
 * @return The artifact.
 *
 * @see [ArtifactHandler.add]
 */
fun ArtifactHandler.`dokkaHtmlGeneratorRuntime`(
    artifactNotation: Any,
    configureAction:  ConfigurablePublishArtifact.() -> Unit
): PublishArtifact =
    add("dokkaHtmlGeneratorRuntime", artifactNotation, configureAction)

/**
 * Adds an artifact to the 'dokkaHtmlGeneratorRuntime' configuration.
 *
 * @param artifactNotation the group of the module to be added as a dependency.
 * @return The artifact.
 *
 * @see [ArtifactHandler.add]
 */
fun ArtifactHandler.`dokkaHtmlGeneratorRuntime`(artifactNotation: Any): PublishArtifact =
    add("dokkaHtmlGeneratorRuntime", artifactNotation)

/**
 * Adds an artifact to the 'dokkaHtmlGeneratorRuntimeResolver.internal' configuration.
 *
 * @param artifactNotation the group of the module to be added as a dependency.
 * @param configureAction The action to execute to configure the artifact.
 * @return The artifact.
 *
 * @see [ArtifactHandler.add]
 */
fun ArtifactHandler.`dokkaHtmlGeneratorRuntimeResolver.internal`(
    artifactNotation: Any,
    configureAction:  ConfigurablePublishArtifact.() -> Unit
): PublishArtifact =
    add("dokkaHtmlGeneratorRuntimeResolver.internal", artifactNotation, configureAction)

/**
 * Adds an artifact to the 'dokkaHtmlGeneratorRuntimeResolver.internal' configuration.
 *
 * @param artifactNotation the group of the module to be added as a dependency.
 * @return The artifact.
 *
 * @see [ArtifactHandler.add]
 */
fun ArtifactHandler.`dokkaHtmlGeneratorRuntimeResolver.internal`(artifactNotation: Any): PublishArtifact =
    add("dokkaHtmlGeneratorRuntimeResolver.internal", artifactNotation)

/**
 * Adds an artifact to the 'dokkaHtmlModuleOutputDirectoriesConsumable.internal' configuration.
 *
 * @param artifactNotation the group of the module to be added as a dependency.
 * @param configureAction The action to execute to configure the artifact.
 * @return The artifact.
 *
 * @see [ArtifactHandler.add]
 */
fun ArtifactHandler.`dokkaHtmlModuleOutputDirectoriesConsumable.internal`(
    artifactNotation: Any,
    configureAction:  ConfigurablePublishArtifact.() -> Unit
): PublishArtifact =
    add("dokkaHtmlModuleOutputDirectoriesConsumable.internal", artifactNotation, configureAction)

/**
 * Adds an artifact to the 'dokkaHtmlModuleOutputDirectoriesConsumable.internal' configuration.
 *
 * @param artifactNotation the group of the module to be added as a dependency.
 * @return The artifact.
 *
 * @see [ArtifactHandler.add]
 */
fun ArtifactHandler.`dokkaHtmlModuleOutputDirectoriesConsumable.internal`(artifactNotation: Any): PublishArtifact =
    add("dokkaHtmlModuleOutputDirectoriesConsumable.internal", artifactNotation)

/**
 * Adds an artifact to the 'dokkaHtmlModuleOutputDirectoriesResolver.internal' configuration.
 *
 * @param artifactNotation the group of the module to be added as a dependency.
 * @param configureAction The action to execute to configure the artifact.
 * @return The artifact.
 *
 * @see [ArtifactHandler.add]
 */
fun ArtifactHandler.`dokkaHtmlModuleOutputDirectoriesResolver.internal`(
    artifactNotation: Any,
    configureAction:  ConfigurablePublishArtifact.() -> Unit
): PublishArtifact =
    add("dokkaHtmlModuleOutputDirectoriesResolver.internal", artifactNotation, configureAction)

/**
 * Adds an artifact to the 'dokkaHtmlModuleOutputDirectoriesResolver.internal' configuration.
 *
 * @param artifactNotation the group of the module to be added as a dependency.
 * @return The artifact.
 *
 * @see [ArtifactHandler.add]
 */
fun ArtifactHandler.`dokkaHtmlModuleOutputDirectoriesResolver.internal`(artifactNotation: Any): PublishArtifact =
    add("dokkaHtmlModuleOutputDirectoriesResolver.internal", artifactNotation)

/**
 * Adds an artifact to the 'dokkaHtmlPartialRuntime' configuration.
 *
 * @param artifactNotation the group of the module to be added as a dependency.
 * @param configureAction The action to execute to configure the artifact.
 * @return The artifact.
 *
 * @see [ArtifactHandler.add]
 */
fun ArtifactHandler.`dokkaHtmlPartialRuntime`(
    artifactNotation: Any,
    configureAction:  ConfigurablePublishArtifact.() -> Unit
): PublishArtifact =
    add("dokkaHtmlPartialRuntime", artifactNotation, configureAction)

/**
 * Adds an artifact to the 'dokkaHtmlPartialRuntime' configuration.
 *
 * @param artifactNotation the group of the module to be added as a dependency.
 * @return The artifact.
 *
 * @see [ArtifactHandler.add]
 */
fun ArtifactHandler.`dokkaHtmlPartialRuntime`(artifactNotation: Any): PublishArtifact =
    add("dokkaHtmlPartialRuntime", artifactNotation)

/**
 * Adds an artifact to the 'dokkaHtmlPlugin' configuration.
 *
 * @param artifactNotation the group of the module to be added as a dependency.
 * @param configureAction The action to execute to configure the artifact.
 * @return The artifact.
 *
 * @see [ArtifactHandler.add]
 */
fun ArtifactHandler.`dokkaHtmlPlugin`(
    artifactNotation: Any,
    configureAction:  ConfigurablePublishArtifact.() -> Unit
): PublishArtifact =
    add("dokkaHtmlPlugin", artifactNotation, configureAction)

/**
 * Adds an artifact to the 'dokkaHtmlPlugin' configuration.
 *
 * @param artifactNotation the group of the module to be added as a dependency.
 * @return The artifact.
 *
 * @see [ArtifactHandler.add]
 */
fun ArtifactHandler.`dokkaHtmlPlugin`(artifactNotation: Any): PublishArtifact =
    add("dokkaHtmlPlugin", artifactNotation)

/**
 * Adds an artifact to the 'dokkaHtmlPluginIntransitiveResolver.internal' configuration.
 *
 * @param artifactNotation the group of the module to be added as a dependency.
 * @param configureAction The action to execute to configure the artifact.
 * @return The artifact.
 *
 * @see [ArtifactHandler.add]
 */
fun ArtifactHandler.`dokkaHtmlPluginIntransitiveResolver.internal`(
    artifactNotation: Any,
    configureAction:  ConfigurablePublishArtifact.() -> Unit
): PublishArtifact =
    add("dokkaHtmlPluginIntransitiveResolver.internal", artifactNotation, configureAction)

/**
 * Adds an artifact to the 'dokkaHtmlPluginIntransitiveResolver.internal' configuration.
 *
 * @param artifactNotation the group of the module to be added as a dependency.
 * @return The artifact.
 *
 * @see [ArtifactHandler.add]
 */
fun ArtifactHandler.`dokkaHtmlPluginIntransitiveResolver.internal`(artifactNotation: Any): PublishArtifact =
    add("dokkaHtmlPluginIntransitiveResolver.internal", artifactNotation)

/**
 * Adds an artifact to the 'dokkaHtmlPublicationPlugin' configuration.
 *
 * @param artifactNotation the group of the module to be added as a dependency.
 * @param configureAction The action to execute to configure the artifact.
 * @return The artifact.
 *
 * @see [ArtifactHandler.add]
 */
fun ArtifactHandler.`dokkaHtmlPublicationPlugin`(
    artifactNotation: Any,
    configureAction:  ConfigurablePublishArtifact.() -> Unit
): PublishArtifact =
    add("dokkaHtmlPublicationPlugin", artifactNotation, configureAction)

/**
 * Adds an artifact to the 'dokkaHtmlPublicationPlugin' configuration.
 *
 * @param artifactNotation the group of the module to be added as a dependency.
 * @return The artifact.
 *
 * @see [ArtifactHandler.add]
 */
fun ArtifactHandler.`dokkaHtmlPublicationPlugin`(artifactNotation: Any): PublishArtifact =
    add("dokkaHtmlPublicationPlugin", artifactNotation)

/**
 * Adds an artifact to the 'dokkaHtmlPublicationPluginApiOnly.internal' configuration.
 *
 * @param artifactNotation the group of the module to be added as a dependency.
 * @param configureAction The action to execute to configure the artifact.
 * @return The artifact.
 *
 * @see [ArtifactHandler.add]
 */
fun ArtifactHandler.`dokkaHtmlPublicationPluginApiOnly.internal`(
    artifactNotation: Any,
    configureAction:  ConfigurablePublishArtifact.() -> Unit
): PublishArtifact =
    add("dokkaHtmlPublicationPluginApiOnly.internal", artifactNotation, configureAction)

/**
 * Adds an artifact to the 'dokkaHtmlPublicationPluginApiOnly.internal' configuration.
 *
 * @param artifactNotation the group of the module to be added as a dependency.
 * @return The artifact.
 *
 * @see [ArtifactHandler.add]
 */
fun ArtifactHandler.`dokkaHtmlPublicationPluginApiOnly.internal`(artifactNotation: Any): PublishArtifact =
    add("dokkaHtmlPublicationPluginApiOnly.internal", artifactNotation)

/**
 * Adds an artifact to the 'dokkaHtmlPublicationPluginApiOnlyConsumable.internal' configuration.
 *
 * @param artifactNotation the group of the module to be added as a dependency.
 * @param configureAction The action to execute to configure the artifact.
 * @return The artifact.
 *
 * @see [ArtifactHandler.add]
 */
fun ArtifactHandler.`dokkaHtmlPublicationPluginApiOnlyConsumable.internal`(
    artifactNotation: Any,
    configureAction:  ConfigurablePublishArtifact.() -> Unit
): PublishArtifact =
    add("dokkaHtmlPublicationPluginApiOnlyConsumable.internal", artifactNotation, configureAction)

/**
 * Adds an artifact to the 'dokkaHtmlPublicationPluginApiOnlyConsumable.internal' configuration.
 *
 * @param artifactNotation the group of the module to be added as a dependency.
 * @return The artifact.
 *
 * @see [ArtifactHandler.add]
 */
fun ArtifactHandler.`dokkaHtmlPublicationPluginApiOnlyConsumable.internal`(artifactNotation: Any): PublishArtifact =
    add("dokkaHtmlPublicationPluginApiOnlyConsumable.internal", artifactNotation)

/**
 * Adds an artifact to the 'dokkaHtmlPublicationPluginResolver.internal' configuration.
 *
 * @param artifactNotation the group of the module to be added as a dependency.
 * @param configureAction The action to execute to configure the artifact.
 * @return The artifact.
 *
 * @see [ArtifactHandler.add]
 */
fun ArtifactHandler.`dokkaHtmlPublicationPluginResolver.internal`(
    artifactNotation: Any,
    configureAction:  ConfigurablePublishArtifact.() -> Unit
): PublishArtifact =
    add("dokkaHtmlPublicationPluginResolver.internal", artifactNotation, configureAction)

/**
 * Adds an artifact to the 'dokkaHtmlPublicationPluginResolver.internal' configuration.
 *
 * @param artifactNotation the group of the module to be added as a dependency.
 * @return The artifact.
 *
 * @see [ArtifactHandler.add]
 */
fun ArtifactHandler.`dokkaHtmlPublicationPluginResolver.internal`(artifactNotation: Any): PublishArtifact =
    add("dokkaHtmlPublicationPluginResolver.internal", artifactNotation)

/**
 * Adds an artifact to the 'dokkaHtmlRuntime' configuration.
 *
 * @param artifactNotation the group of the module to be added as a dependency.
 * @param configureAction The action to execute to configure the artifact.
 * @return The artifact.
 *
 * @see [ArtifactHandler.add]
 */
fun ArtifactHandler.`dokkaHtmlRuntime`(
    artifactNotation: Any,
    configureAction:  ConfigurablePublishArtifact.() -> Unit
): PublishArtifact =
    add("dokkaHtmlRuntime", artifactNotation, configureAction)

/**
 * Adds an artifact to the 'dokkaHtmlRuntime' configuration.
 *
 * @param artifactNotation the group of the module to be added as a dependency.
 * @return The artifact.
 *
 * @see [ArtifactHandler.add]
 */
fun ArtifactHandler.`dokkaHtmlRuntime`(artifactNotation: Any): PublishArtifact =
    add("dokkaHtmlRuntime", artifactNotation)

/**
 * Adds an artifact to the 'dokkaJavadocPartialPlugin' configuration.
 *
 * @param artifactNotation the group of the module to be added as a dependency.
 * @param configureAction The action to execute to configure the artifact.
 * @return The artifact.
 *
 * @see [ArtifactHandler.add]
 */
fun ArtifactHandler.`dokkaJavadocPartialPlugin`(
    artifactNotation: Any,
    configureAction:  ConfigurablePublishArtifact.() -> Unit
): PublishArtifact =
    add("dokkaJavadocPartialPlugin", artifactNotation, configureAction)

/**
 * Adds an artifact to the 'dokkaJavadocPartialPlugin' configuration.
 *
 * @param artifactNotation the group of the module to be added as a dependency.
 * @return The artifact.
 *
 * @see [ArtifactHandler.add]
 */
fun ArtifactHandler.`dokkaJavadocPartialPlugin`(artifactNotation: Any): PublishArtifact =
    add("dokkaJavadocPartialPlugin", artifactNotation)

/**
 * Adds an artifact to the 'dokkaJavadocPartialRuntime' configuration.
 *
 * @param artifactNotation the group of the module to be added as a dependency.
 * @param configureAction The action to execute to configure the artifact.
 * @return The artifact.
 *
 * @see [ArtifactHandler.add]
 */
fun ArtifactHandler.`dokkaJavadocPartialRuntime`(
    artifactNotation: Any,
    configureAction:  ConfigurablePublishArtifact.() -> Unit
): PublishArtifact =
    add("dokkaJavadocPartialRuntime", artifactNotation, configureAction)

/**
 * Adds an artifact to the 'dokkaJavadocPartialRuntime' configuration.
 *
 * @param artifactNotation the group of the module to be added as a dependency.
 * @return The artifact.
 *
 * @see [ArtifactHandler.add]
 */
fun ArtifactHandler.`dokkaJavadocPartialRuntime`(artifactNotation: Any): PublishArtifact =
    add("dokkaJavadocPartialRuntime", artifactNotation)

/**
 * Adds an artifact to the 'dokkaJavadocPlugin' configuration.
 *
 * @param artifactNotation the group of the module to be added as a dependency.
 * @param configureAction The action to execute to configure the artifact.
 * @return The artifact.
 *
 * @see [ArtifactHandler.add]
 */
fun ArtifactHandler.`dokkaJavadocPlugin`(
    artifactNotation: Any,
    configureAction:  ConfigurablePublishArtifact.() -> Unit
): PublishArtifact =
    add("dokkaJavadocPlugin", artifactNotation, configureAction)

/**
 * Adds an artifact to the 'dokkaJavadocPlugin' configuration.
 *
 * @param artifactNotation the group of the module to be added as a dependency.
 * @return The artifact.
 *
 * @see [ArtifactHandler.add]
 */
fun ArtifactHandler.`dokkaJavadocPlugin`(artifactNotation: Any): PublishArtifact =
    add("dokkaJavadocPlugin", artifactNotation)

/**
 * Adds an artifact to the 'dokkaJavadocRuntime' configuration.
 *
 * @param artifactNotation the group of the module to be added as a dependency.
 * @param configureAction The action to execute to configure the artifact.
 * @return The artifact.
 *
 * @see [ArtifactHandler.add]
 */
fun ArtifactHandler.`dokkaJavadocRuntime`(
    artifactNotation: Any,
    configureAction:  ConfigurablePublishArtifact.() -> Unit
): PublishArtifact =
    add("dokkaJavadocRuntime", artifactNotation, configureAction)

/**
 * Adds an artifact to the 'dokkaJavadocRuntime' configuration.
 *
 * @param artifactNotation the group of the module to be added as a dependency.
 * @return The artifact.
 *
 * @see [ArtifactHandler.add]
 */
fun ArtifactHandler.`dokkaJavadocRuntime`(artifactNotation: Any): PublishArtifact =
    add("dokkaJavadocRuntime", artifactNotation)

/**
 * Adds an artifact to the 'dokkaJekyllPartialPlugin' configuration.
 *
 * @param artifactNotation the group of the module to be added as a dependency.
 * @param configureAction The action to execute to configure the artifact.
 * @return The artifact.
 *
 * @see [ArtifactHandler.add]
 */
fun ArtifactHandler.`dokkaJekyllPartialPlugin`(
    artifactNotation: Any,
    configureAction:  ConfigurablePublishArtifact.() -> Unit
): PublishArtifact =
    add("dokkaJekyllPartialPlugin", artifactNotation, configureAction)

/**
 * Adds an artifact to the 'dokkaJekyllPartialPlugin' configuration.
 *
 * @param artifactNotation the group of the module to be added as a dependency.
 * @return The artifact.
 *
 * @see [ArtifactHandler.add]
 */
fun ArtifactHandler.`dokkaJekyllPartialPlugin`(artifactNotation: Any): PublishArtifact =
    add("dokkaJekyllPartialPlugin", artifactNotation)

/**
 * Adds an artifact to the 'dokkaJekyllPartialRuntime' configuration.
 *
 * @param artifactNotation the group of the module to be added as a dependency.
 * @param configureAction The action to execute to configure the artifact.
 * @return The artifact.
 *
 * @see [ArtifactHandler.add]
 */
fun ArtifactHandler.`dokkaJekyllPartialRuntime`(
    artifactNotation: Any,
    configureAction:  ConfigurablePublishArtifact.() -> Unit
): PublishArtifact =
    add("dokkaJekyllPartialRuntime", artifactNotation, configureAction)

/**
 * Adds an artifact to the 'dokkaJekyllPartialRuntime' configuration.
 *
 * @param artifactNotation the group of the module to be added as a dependency.
 * @return The artifact.
 *
 * @see [ArtifactHandler.add]
 */
fun ArtifactHandler.`dokkaJekyllPartialRuntime`(artifactNotation: Any): PublishArtifact =
    add("dokkaJekyllPartialRuntime", artifactNotation)

/**
 * Adds an artifact to the 'dokkaJekyllPlugin' configuration.
 *
 * @param artifactNotation the group of the module to be added as a dependency.
 * @param configureAction The action to execute to configure the artifact.
 * @return The artifact.
 *
 * @see [ArtifactHandler.add]
 */
fun ArtifactHandler.`dokkaJekyllPlugin`(
    artifactNotation: Any,
    configureAction:  ConfigurablePublishArtifact.() -> Unit
): PublishArtifact =
    add("dokkaJekyllPlugin", artifactNotation, configureAction)

/**
 * Adds an artifact to the 'dokkaJekyllPlugin' configuration.
 *
 * @param artifactNotation the group of the module to be added as a dependency.
 * @return The artifact.
 *
 * @see [ArtifactHandler.add]
 */
fun ArtifactHandler.`dokkaJekyllPlugin`(artifactNotation: Any): PublishArtifact =
    add("dokkaJekyllPlugin", artifactNotation)

/**
 * Adds an artifact to the 'dokkaJekyllRuntime' configuration.
 *
 * @param artifactNotation the group of the module to be added as a dependency.
 * @param configureAction The action to execute to configure the artifact.
 * @return The artifact.
 *
 * @see [ArtifactHandler.add]
 */
fun ArtifactHandler.`dokkaJekyllRuntime`(
    artifactNotation: Any,
    configureAction:  ConfigurablePublishArtifact.() -> Unit
): PublishArtifact =
    add("dokkaJekyllRuntime", artifactNotation, configureAction)

/**
 * Adds an artifact to the 'dokkaJekyllRuntime' configuration.
 *
 * @param artifactNotation the group of the module to be added as a dependency.
 * @return The artifact.
 *
 * @see [ArtifactHandler.add]
 */
fun ArtifactHandler.`dokkaJekyllRuntime`(artifactNotation: Any): PublishArtifact =
    add("dokkaJekyllRuntime", artifactNotation)

/**
 * Adds an artifact to the 'dokkaPlugin' configuration.
 *
 * @param artifactNotation the group of the module to be added as a dependency.
 * @param configureAction The action to execute to configure the artifact.
 * @return The artifact.
 *
 * @see [ArtifactHandler.add]
 */
fun ArtifactHandler.`dokkaPlugin`(
    artifactNotation: Any,
    configureAction:  ConfigurablePublishArtifact.() -> Unit
): PublishArtifact =
    add("dokkaPlugin", artifactNotation, configureAction)

/**
 * Adds an artifact to the 'dokkaPlugin' configuration.
 *
 * @param artifactNotation the group of the module to be added as a dependency.
 * @return The artifact.
 *
 * @see [ArtifactHandler.add]
 */
fun ArtifactHandler.`dokkaPlugin`(artifactNotation: Any): PublishArtifact =
    add("dokkaPlugin", artifactNotation)

/**
 * Adds an artifact to the 'dokkaRuntime' configuration.
 *
 * @param artifactNotation the group of the module to be added as a dependency.
 * @param configureAction The action to execute to configure the artifact.
 * @return The artifact.
 *
 * @see [ArtifactHandler.add]
 */
fun ArtifactHandler.`dokkaRuntime`(
    artifactNotation: Any,
    configureAction:  ConfigurablePublishArtifact.() -> Unit
): PublishArtifact =
    add("dokkaRuntime", artifactNotation, configureAction)

/**
 * Adds an artifact to the 'dokkaRuntime' configuration.
 *
 * @param artifactNotation the group of the module to be added as a dependency.
 * @return The artifact.
 *
 * @see [ArtifactHandler.add]
 */
fun ArtifactHandler.`dokkaRuntime`(artifactNotation: Any): PublishArtifact =
    add("dokkaRuntime", artifactNotation)

/**
 * Configures the [dokkaPublications][org.gradle.api.NamedDomainObjectContainer<org.jetbrains.dokka.gradle.dokka.DokkaPublication>] extension.
 */
fun org.jetbrains.dokka.gradle.DokkaExtension.`dokkaPublications`(configure: Action<org.gradle.api.NamedDomainObjectContainer<org.jetbrains.dokka.gradle.dokka.DokkaPublication>>): Unit =
    (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("dokkaPublications", configure)

/**
 * Configures the [dokkaSourceSets][org.gradle.api.NamedDomainObjectContainer<org.jetbrains.dokka.gradle.dokka.parameters.DokkaSourceSetSpec>] extension.
 */
fun org.jetbrains.dokka.gradle.DokkaExtension.`dokkaSourceSets`(configure: Action<org.gradle.api.NamedDomainObjectContainer<org.jetbrains.dokka.gradle.dokka.parameters.DokkaSourceSetSpec>>): Unit =
    (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("dokkaSourceSets", configure)

/**
 * Configures the [dokka][org.jetbrains.dokka.gradle.DokkaExtension] extension.
 */
fun org.gradle.api.Project.`dokka`(configure: Action<org.jetbrains.dokka.gradle.DokkaExtension>): Unit =
    (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("dokka", configure)

/**
 * Configures the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
 */
fun org.gradle.api.ExtensiblePolymorphicDomainObjectContainer<org.jetbrains.dokka.gradle.dokka.plugins.DokkaPluginParametersBaseSpec>.`ext`(configure: Action<org.gradle.api.plugins.ExtraPropertiesExtension>): Unit =
    (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("ext", configure)

/**
 * Configures the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
 */
fun org.gradle.api.NamedDomainObjectContainer<org.jetbrains.dokka.gradle.dokka.DokkaPublication>.`ext`(configure: Action<org.gradle.api.plugins.ExtraPropertiesExtension>): Unit =
    (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("ext", configure)

/**
 * Configures the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
 */
fun org.gradle.api.NamedDomainObjectContainer<org.jetbrains.dokka.gradle.dokka.parameters.DokkaSourceSetSpec>.`ext`(configure: Action<org.gradle.api.plugins.ExtraPropertiesExtension>): Unit =
    (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("ext", configure)

/**
 * Configures the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
 */
fun org.jetbrains.dokka.gradle.DokkaExtension.Versions.`ext`(configure: Action<org.gradle.api.plugins.ExtraPropertiesExtension>): Unit =
    (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("ext", configure)

/**
 * Configures the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
 */
fun org.jetbrains.dokka.gradle.DokkaExtension.`ext`(configure: Action<org.gradle.api.plugins.ExtraPropertiesExtension>): Unit =
    (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("ext", configure)

/**
 * Configures the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
 */
fun org.jetbrains.dokka.gradle.dokka.plugins.DokkaHtmlPluginParameters.`ext`(configure: Action<org.gradle.api.plugins.ExtraPropertiesExtension>): Unit =
    (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("ext", configure)

/**
 * Configures the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
 */
fun org.jetbrains.dokka.gradle.dokka.plugins.DokkaVersioningPluginParameters.`ext`(configure: Action<org.gradle.api.plugins.ExtraPropertiesExtension>): Unit =
    (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("ext", configure)

/**
 * Configures the [html][org.jetbrains.dokka.gradle.dokka.plugins.DokkaHtmlPluginParameters] extension.
 */
fun org.gradle.api.ExtensiblePolymorphicDomainObjectContainer<org.jetbrains.dokka.gradle.dokka.plugins.DokkaPluginParametersBaseSpec>.`html`(configure: Action<org.jetbrains.dokka.gradle.dokka.plugins.DokkaHtmlPluginParameters>): Unit =
    (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("html", configure)

/**
 * Configures the [pluginsConfiguration][org.gradle.api.ExtensiblePolymorphicDomainObjectContainer<org.jetbrains.dokka.gradle.dokka.plugins.DokkaPluginParametersBaseSpec>] extension.
 */
fun org.jetbrains.dokka.gradle.DokkaExtension.`pluginsConfiguration`(configure: Action<org.gradle.api.ExtensiblePolymorphicDomainObjectContainer<org.jetbrains.dokka.gradle.dokka.plugins.DokkaPluginParametersBaseSpec>>): Unit =
    (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("pluginsConfiguration", configure)

/**
 * Configures the [versioning][org.jetbrains.dokka.gradle.dokka.plugins.DokkaVersioningPluginParameters] extension.
 */
fun org.gradle.api.ExtensiblePolymorphicDomainObjectContainer<org.jetbrains.dokka.gradle.dokka.plugins.DokkaPluginParametersBaseSpec>.`versioning`(configure: Action<org.jetbrains.dokka.gradle.dokka.plugins.DokkaVersioningPluginParameters>): Unit =
    (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("versioning", configure)

/**
 * Configures the [versions][org.jetbrains.dokka.gradle.DokkaExtension.Versions] extension.
 */
fun org.jetbrains.dokka.gradle.DokkaExtension.`versions`(configure: Action<org.jetbrains.dokka.gradle.DokkaExtension.Versions>): Unit =
    (this as org.gradle.api.plugins.ExtensionAware).extensions.configure("versions", configure)

/**
 * Provides the existing [dokkaGenerateModuleHtml][org.jetbrains.dokka.gradle.tasks.DokkaGenerateModuleTask] task.
 */
val TaskContainer.`dokkaGenerateModuleHtml`: TaskProvider<org.jetbrains.dokka.gradle.tasks.DokkaGenerateModuleTask>
    get() = named<org.jetbrains.dokka.gradle.tasks.DokkaGenerateModuleTask>("dokkaGenerateModuleHtml")

/**
 * Provides the existing [dokkaGeneratePublicationHtml][org.jetbrains.dokka.gradle.tasks.DokkaGeneratePublicationTask] task.
 */
val TaskContainer.`dokkaGeneratePublicationHtml`: TaskProvider<org.jetbrains.dokka.gradle.tasks.DokkaGeneratePublicationTask>
    get() = named<org.jetbrains.dokka.gradle.tasks.DokkaGeneratePublicationTask>("dokkaGeneratePublicationHtml")

/**
 * Provides the existing [dokkaGenerate][org.jetbrains.dokka.gradle.tasks.DokkaBaseTask] task.
 */
val TaskContainer.`dokkaGenerate`: TaskProvider<org.jetbrains.dokka.gradle.tasks.DokkaBaseTask>
    get() = named<org.jetbrains.dokka.gradle.tasks.DokkaBaseTask>("dokkaGenerate")

/**
 * Provides the existing [dokkaGfmPartialPlugin][org.gradle.api.artifacts.Configuration] element.
 */
val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`dokkaGfmPartialPlugin`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
    get() = named<org.gradle.api.artifacts.Configuration>("dokkaGfmPartialPlugin")

/**
 * Provides the existing [dokkaGfmPartialRuntime][org.gradle.api.artifacts.Configuration] element.
 */
val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`dokkaGfmPartialRuntime`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
    get() = named<org.gradle.api.artifacts.Configuration>("dokkaGfmPartialRuntime")

/**
 * Provides the existing [dokkaGfmPartial][org.jetbrains.dokka.gradle.DokkaTaskPartial] task.
 */
val TaskContainer.`dokkaGfmPartial`: TaskProvider<org.jetbrains.dokka.gradle.DokkaTaskPartial>
    get() = named<org.jetbrains.dokka.gradle.DokkaTaskPartial>("dokkaGfmPartial")

/**
 * Provides the existing [dokkaGfmPlugin][org.gradle.api.artifacts.Configuration] element.
 */
val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`dokkaGfmPlugin`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
    get() = named<org.gradle.api.artifacts.Configuration>("dokkaGfmPlugin")

/**
 * Provides the existing [dokkaGfmRuntime][org.gradle.api.artifacts.Configuration] element.
 */
val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`dokkaGfmRuntime`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
    get() = named<org.gradle.api.artifacts.Configuration>("dokkaGfmRuntime")

/**
 * Provides the existing [dokkaGfm][org.jetbrains.dokka.gradle.DokkaTask] task.
 */
val TaskContainer.`dokkaGfm`: TaskProvider<org.jetbrains.dokka.gradle.DokkaTask>
    get() = named<org.jetbrains.dokka.gradle.DokkaTask>("dokkaGfm")

/**
 * Provides the existing [dokkaHtmlGeneratorRuntimeResolver.internal][org.gradle.api.artifacts.Configuration] element.
 */
val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`dokkaHtmlGeneratorRuntimeResolver.internal`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
    get() = named<org.gradle.api.artifacts.Configuration>("dokkaHtmlGeneratorRuntimeResolver.internal")

/**
 * Provides the existing [dokkaHtmlGeneratorRuntime][org.gradle.api.artifacts.Configuration] element.
 */
val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`dokkaHtmlGeneratorRuntime`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
    get() = named<org.gradle.api.artifacts.Configuration>("dokkaHtmlGeneratorRuntime")

/**
 * Provides the existing [dokkaHtmlModuleOutputDirectoriesConsumable.internal][org.gradle.api.artifacts.Configuration] element.
 */
val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`dokkaHtmlModuleOutputDirectoriesConsumable.internal`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
    get() = named<org.gradle.api.artifacts.Configuration>("dokkaHtmlModuleOutputDirectoriesConsumable.internal")

/**
 * Provides the existing [dokkaHtmlModuleOutputDirectoriesResolver.internal][org.gradle.api.artifacts.Configuration] element.
 */
val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`dokkaHtmlModuleOutputDirectoriesResolver.internal`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
    get() = named<org.gradle.api.artifacts.Configuration>("dokkaHtmlModuleOutputDirectoriesResolver.internal")

/**
 * Provides the existing [dokkaHtmlPartialRuntime][org.gradle.api.artifacts.Configuration] element.
 */
val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`dokkaHtmlPartialRuntime`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
    get() = named<org.gradle.api.artifacts.Configuration>("dokkaHtmlPartialRuntime")

/**
 * Provides the existing [dokkaHtmlPartial][org.jetbrains.dokka.gradle.DokkaTaskPartial] task.
 */
val TaskContainer.`dokkaHtmlPartial`: TaskProvider<org.jetbrains.dokka.gradle.DokkaTaskPartial>
    get() = named<org.jetbrains.dokka.gradle.DokkaTaskPartial>("dokkaHtmlPartial")

/**
 * Provides the existing [dokkaHtmlPluginIntransitiveResolver.internal][org.gradle.api.artifacts.Configuration] element.
 */
val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`dokkaHtmlPluginIntransitiveResolver.internal`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
    get() = named<org.gradle.api.artifacts.Configuration>("dokkaHtmlPluginIntransitiveResolver.internal")

/**
 * Provides the existing [dokkaHtmlPlugin][org.gradle.api.artifacts.Configuration] element.
 */
val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`dokkaHtmlPlugin`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
    get() = named<org.gradle.api.artifacts.Configuration>("dokkaHtmlPlugin")

/**
 * Provides the existing [dokkaHtmlPublicationPluginApiOnly.internal][org.gradle.api.artifacts.Configuration] element.
 */
val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`dokkaHtmlPublicationPluginApiOnly.internal`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
    get() = named<org.gradle.api.artifacts.Configuration>("dokkaHtmlPublicationPluginApiOnly.internal")

/**
 * Provides the existing [dokkaHtmlPublicationPluginApiOnlyConsumable.internal][org.gradle.api.artifacts.Configuration] element.
 */
val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`dokkaHtmlPublicationPluginApiOnlyConsumable.internal`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
    get() = named<org.gradle.api.artifacts.Configuration>("dokkaHtmlPublicationPluginApiOnlyConsumable.internal")

/**
 * Provides the existing [dokkaHtmlPublicationPluginResolver.internal][org.gradle.api.artifacts.Configuration] element.
 */
val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`dokkaHtmlPublicationPluginResolver.internal`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
    get() = named<org.gradle.api.artifacts.Configuration>("dokkaHtmlPublicationPluginResolver.internal")

/**
 * Provides the existing [dokkaHtmlPublicationPlugin][org.gradle.api.artifacts.Configuration] element.
 */
val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`dokkaHtmlPublicationPlugin`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
    get() = named<org.gradle.api.artifacts.Configuration>("dokkaHtmlPublicationPlugin")

/**
 * Provides the existing [dokkaHtmlRuntime][org.gradle.api.artifacts.Configuration] element.
 */
val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`dokkaHtmlRuntime`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
    get() = named<org.gradle.api.artifacts.Configuration>("dokkaHtmlRuntime")

/**
 * Provides the existing [dokkaHtml][org.jetbrains.dokka.gradle.DokkaTask] task.
 */
val TaskContainer.`dokkaHtml`: TaskProvider<org.jetbrains.dokka.gradle.DokkaTask>
    get() = named<org.jetbrains.dokka.gradle.DokkaTask>("dokkaHtml")

/**
 * Provides the existing [dokkaJavadocPartialPlugin][org.gradle.api.artifacts.Configuration] element.
 */
val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`dokkaJavadocPartialPlugin`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
    get() = named<org.gradle.api.artifacts.Configuration>("dokkaJavadocPartialPlugin")

/**
 * Provides the existing [dokkaJavadocPartialRuntime][org.gradle.api.artifacts.Configuration] element.
 */
val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`dokkaJavadocPartialRuntime`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
    get() = named<org.gradle.api.artifacts.Configuration>("dokkaJavadocPartialRuntime")

/**
 * Provides the existing [dokkaJavadocPartial][org.jetbrains.dokka.gradle.DokkaTaskPartial] task.
 */
val TaskContainer.`dokkaJavadocPartial`: TaskProvider<org.jetbrains.dokka.gradle.DokkaTaskPartial>
    get() = named<org.jetbrains.dokka.gradle.DokkaTaskPartial>("dokkaJavadocPartial")

/**
 * Provides the existing [dokkaJavadocPlugin][org.gradle.api.artifacts.Configuration] element.
 */
val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`dokkaJavadocPlugin`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
    get() = named<org.gradle.api.artifacts.Configuration>("dokkaJavadocPlugin")

/**
 * Provides the existing [dokkaJavadocRuntime][org.gradle.api.artifacts.Configuration] element.
 */
val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`dokkaJavadocRuntime`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
    get() = named<org.gradle.api.artifacts.Configuration>("dokkaJavadocRuntime")

/**
 * Provides the existing [dokkaJavadoc][org.jetbrains.dokka.gradle.DokkaTask] task.
 */
val TaskContainer.`dokkaJavadoc`: TaskProvider<org.jetbrains.dokka.gradle.DokkaTask>
    get() = named<org.jetbrains.dokka.gradle.DokkaTask>("dokkaJavadoc")

/**
 * Provides the existing [dokkaJekyllPartialPlugin][org.gradle.api.artifacts.Configuration] element.
 */
val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`dokkaJekyllPartialPlugin`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
    get() = named<org.gradle.api.artifacts.Configuration>("dokkaJekyllPartialPlugin")

/**
 * Provides the existing [dokkaJekyllPartialRuntime][org.gradle.api.artifacts.Configuration] element.
 */
val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`dokkaJekyllPartialRuntime`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
    get() = named<org.gradle.api.artifacts.Configuration>("dokkaJekyllPartialRuntime")

/**
 * Provides the existing [dokkaJekyllPartial][org.jetbrains.dokka.gradle.DokkaTaskPartial] task.
 */
val TaskContainer.`dokkaJekyllPartial`: TaskProvider<org.jetbrains.dokka.gradle.DokkaTaskPartial>
    get() = named<org.jetbrains.dokka.gradle.DokkaTaskPartial>("dokkaJekyllPartial")

/**
 * Provides the existing [dokkaJekyllPlugin][org.gradle.api.artifacts.Configuration] element.
 */
val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`dokkaJekyllPlugin`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
    get() = named<org.gradle.api.artifacts.Configuration>("dokkaJekyllPlugin")

/**
 * Provides the existing [dokkaJekyllRuntime][org.gradle.api.artifacts.Configuration] element.
 */
val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`dokkaJekyllRuntime`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
    get() = named<org.gradle.api.artifacts.Configuration>("dokkaJekyllRuntime")

/**
 * Provides the existing [dokkaJekyll][org.jetbrains.dokka.gradle.DokkaTask] task.
 */
val TaskContainer.`dokkaJekyll`: TaskProvider<org.jetbrains.dokka.gradle.DokkaTask>
    get() = named<org.jetbrains.dokka.gradle.DokkaTask>("dokkaJekyll")

/**
 * Provides the existing [dokkaPlugin][org.gradle.api.artifacts.Configuration] element.
 */
val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`dokkaPlugin`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
    get() = named<org.gradle.api.artifacts.Configuration>("dokkaPlugin")

/**
 * Provides the existing [dokkaRuntime][org.gradle.api.artifacts.Configuration] element.
 */
val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`dokkaRuntime`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
    get() = named<org.gradle.api.artifacts.Configuration>("dokkaRuntime")

/**
 * Provides the existing [dokka][org.gradle.api.artifacts.Configuration] element.
 */
val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`dokka`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
    get() = named<org.gradle.api.artifacts.Configuration>("dokka")

/**
 * Provides the existing [html][org.jetbrains.dokka.gradle.dokka.DokkaPublication] element.
 */
val org.gradle.api.NamedDomainObjectContainer<org.jetbrains.dokka.gradle.dokka.DokkaPublication>.`html`: NamedDomainObjectProvider<org.jetbrains.dokka.gradle.dokka.DokkaPublication>
    get() = named<org.jetbrains.dokka.gradle.dokka.DokkaPublication>("html")

/**
 * Provides the existing [javaMain][org.jetbrains.dokka.gradle.dokka.parameters.DokkaSourceSetSpec] element.
 */
val org.gradle.api.NamedDomainObjectContainer<org.jetbrains.dokka.gradle.dokka.parameters.DokkaSourceSetSpec>.`javaMain`: NamedDomainObjectProvider<org.jetbrains.dokka.gradle.dokka.parameters.DokkaSourceSetSpec>
    get() = named<org.jetbrains.dokka.gradle.dokka.parameters.DokkaSourceSetSpec>("javaMain")

/**
 * Provides the existing [javaTest][org.jetbrains.dokka.gradle.dokka.parameters.DokkaSourceSetSpec] element.
 */
val org.gradle.api.NamedDomainObjectContainer<org.jetbrains.dokka.gradle.dokka.parameters.DokkaSourceSetSpec>.`javaTest`: NamedDomainObjectProvider<org.jetbrains.dokka.gradle.dokka.parameters.DokkaSourceSetSpec>
    get() = named<org.jetbrains.dokka.gradle.dokka.parameters.DokkaSourceSetSpec>("javaTest")

/**
 * Provides the existing [logLinkDokkaGeneratePublicationHtml][org.jetbrains.dokka.gradle.tasks.LogHtmlPublicationLinkTask] task.
 */
val TaskContainer.`logLinkDokkaGeneratePublicationHtml`: TaskProvider<org.jetbrains.dokka.gradle.tasks.LogHtmlPublicationLinkTask>
    get() = named<org.jetbrains.dokka.gradle.tasks.LogHtmlPublicationLinkTask>("logLinkDokkaGeneratePublicationHtml")

/**
 * Provides the existing [main][org.jetbrains.dokka.gradle.dokka.parameters.DokkaSourceSetSpec] element.
 */
val org.gradle.api.NamedDomainObjectContainer<org.jetbrains.dokka.gradle.dokka.parameters.DokkaSourceSetSpec>.`main`: NamedDomainObjectProvider<org.jetbrains.dokka.gradle.dokka.parameters.DokkaSourceSetSpec>
    get() = named<org.jetbrains.dokka.gradle.dokka.parameters.DokkaSourceSetSpec>("main")

/**
 * Provides the existing [test][org.jetbrains.dokka.gradle.dokka.parameters.DokkaSourceSetSpec] element.
 */
val org.gradle.api.NamedDomainObjectContainer<org.jetbrains.dokka.gradle.dokka.parameters.DokkaSourceSetSpec>.`test`: NamedDomainObjectProvider<org.jetbrains.dokka.gradle.dokka.parameters.DokkaSourceSetSpec>
    get() = named<org.jetbrains.dokka.gradle.dokka.parameters.DokkaSourceSetSpec>("test")

/**
 * Retrieves the [dokkaPublications][org.gradle.api.NamedDomainObjectContainer<org.jetbrains.dokka.gradle.dokka.DokkaPublication>] extension.
 */
val org.jetbrains.dokka.gradle.DokkaExtension.`dokkaPublications`: org.gradle.api.NamedDomainObjectContainer<org.jetbrains.dokka.gradle.dokka.DokkaPublication> get() =
    (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("dokkaPublications") as org.gradle.api.NamedDomainObjectContainer<org.jetbrains.dokka.gradle.dokka.DokkaPublication>

/**
 * Retrieves the [dokkaSourceSets][org.gradle.api.NamedDomainObjectContainer<org.jetbrains.dokka.gradle.dokka.parameters.DokkaSourceSetSpec>] extension.
 */
val org.jetbrains.dokka.gradle.DokkaExtension.`dokkaSourceSets`: org.gradle.api.NamedDomainObjectContainer<org.jetbrains.dokka.gradle.dokka.parameters.DokkaSourceSetSpec> get() =
    (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("dokkaSourceSets") as org.gradle.api.NamedDomainObjectContainer<org.jetbrains.dokka.gradle.dokka.parameters.DokkaSourceSetSpec>

/**
 * Retrieves the [dokka][org.jetbrains.dokka.gradle.DokkaExtension] extension.
 */
val org.gradle.api.Project.`dokka`: org.jetbrains.dokka.gradle.DokkaExtension get() =
    (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("dokka") as org.jetbrains.dokka.gradle.DokkaExtension

/**
 * Retrieves the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
 */
val org.gradle.api.ExtensiblePolymorphicDomainObjectContainer<org.jetbrains.dokka.gradle.dokka.plugins.DokkaPluginParametersBaseSpec>.`ext`: org.gradle.api.plugins.ExtraPropertiesExtension get() =
    (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension

/**
 * Retrieves the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
 */
val org.gradle.api.NamedDomainObjectContainer<org.jetbrains.dokka.gradle.dokka.DokkaPublication>.`ext`: org.gradle.api.plugins.ExtraPropertiesExtension get() =
    (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension

/**
 * Retrieves the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
 */
val org.gradle.api.NamedDomainObjectContainer<org.jetbrains.dokka.gradle.dokka.parameters.DokkaSourceSetSpec>.`ext`: org.gradle.api.plugins.ExtraPropertiesExtension get() =
    (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension

/**
 * Retrieves the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
 */
val org.jetbrains.dokka.gradle.DokkaExtension.Versions.`ext`: org.gradle.api.plugins.ExtraPropertiesExtension get() =
    (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension

/**
 * Retrieves the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
 */
val org.jetbrains.dokka.gradle.DokkaExtension.`ext`: org.gradle.api.plugins.ExtraPropertiesExtension get() =
    (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension

/**
 * Retrieves the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
 */
val org.jetbrains.dokka.gradle.dokka.plugins.DokkaHtmlPluginParameters.`ext`: org.gradle.api.plugins.ExtraPropertiesExtension get() =
    (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension

/**
 * Retrieves the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension.
 */
val org.jetbrains.dokka.gradle.dokka.plugins.DokkaVersioningPluginParameters.`ext`: org.gradle.api.plugins.ExtraPropertiesExtension get() =
    (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension

/**
 * Retrieves the [html][org.jetbrains.dokka.gradle.dokka.plugins.DokkaHtmlPluginParameters] extension.
 */
val org.gradle.api.ExtensiblePolymorphicDomainObjectContainer<org.jetbrains.dokka.gradle.dokka.plugins.DokkaPluginParametersBaseSpec>.`html`: org.jetbrains.dokka.gradle.dokka.plugins.DokkaHtmlPluginParameters get() =
    (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("html") as org.jetbrains.dokka.gradle.dokka.plugins.DokkaHtmlPluginParameters

/**
 * Retrieves the [pluginsConfiguration][org.gradle.api.ExtensiblePolymorphicDomainObjectContainer<org.jetbrains.dokka.gradle.dokka.plugins.DokkaPluginParametersBaseSpec>] extension.
 */
val org.jetbrains.dokka.gradle.DokkaExtension.`pluginsConfiguration`: org.gradle.api.ExtensiblePolymorphicDomainObjectContainer<org.jetbrains.dokka.gradle.dokka.plugins.DokkaPluginParametersBaseSpec> get() =
    (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("pluginsConfiguration") as org.gradle.api.ExtensiblePolymorphicDomainObjectContainer<org.jetbrains.dokka.gradle.dokka.plugins.DokkaPluginParametersBaseSpec>

/**
 * Retrieves the [versioning][org.jetbrains.dokka.gradle.dokka.plugins.DokkaVersioningPluginParameters] extension.
 */
val org.gradle.api.ExtensiblePolymorphicDomainObjectContainer<org.jetbrains.dokka.gradle.dokka.plugins.DokkaPluginParametersBaseSpec>.`versioning`: org.jetbrains.dokka.gradle.dokka.plugins.DokkaVersioningPluginParameters get() =
    (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("versioning") as org.jetbrains.dokka.gradle.dokka.plugins.DokkaVersioningPluginParameters

/**
 * Retrieves the [versions][org.jetbrains.dokka.gradle.DokkaExtension.Versions] extension.
 */
val org.jetbrains.dokka.gradle.DokkaExtension.`versions`: org.jetbrains.dokka.gradle.DokkaExtension.Versions get() =
    (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("versions") as org.jetbrains.dokka.gradle.DokkaExtension.Versions
